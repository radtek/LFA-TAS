2021-06-09 09:11:25.3526 TAS.Services.Entities.Management.EntityCacheData GetTPADetailById: exception: could not execute query
[ select tpa0_.Id as col_0_0_, tpa0_.TpaCode as col_1_0_, tpa0_.Address as col_2_0_, tpa0_.Banner as col_3_0_, tpa0_.Banner2 as col_4_0_, tpa0_.Banner3 as col_5_0_, tpa0_.Banner4 as col_6_0_, tpa0_.Banner5 as col_7_0_, tpa0_.DiscountDescription as col_8_0_, tpa0_.Logo as col_9_0_, tpa0_.Name as col_10_0_, tpa0_.TelNumber as col_11_0_, tpa0_.OriginalTPAName as col_12_0_ from TPA tpa0_ where tpa0_.Id=@p0 ]
  Name:p1 - Value:8cb77627-7825-4e25-be45-ae903eb63d4d
[SQL: select tpa0_.Id as col_0_0_, tpa0_.TpaCode as col_1_0_, tpa0_.Address as col_2_0_, tpa0_.Banner as col_3_0_, tpa0_.Banner2 as col_4_0_, tpa0_.Banner3 as col_5_0_, tpa0_.Banner4 as col_6_0_, tpa0_.Banner5 as col_7_0_, tpa0_.DiscountDescription as col_8_0_, tpa0_.Logo as col_9_0_, tpa0_.Name as col_10_0_, tpa0_.TelNumber as col_11_0_, tpa0_.OriginalTPAName as col_12_0_ from TPA tpa0_ where tpa0_.Id=@p0], System.Data.SqlClient.SqlException (0x80131904): Invalid object name 'TPA'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)
   at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer)
ClientConnectionId:c260a77a-31a9-4b04-9d21-f66f5be442c9
Error Number:208,State:1,Class:16
2021-06-09 09:24:26.2607 TAS.Web.Controllers.ApiManagerForPolicyApprovalController GetCountryDealerProductCommoditiesInsures: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 09:24:26.2607 TAS.Web.Controllers.ApiManagerForPolicyApprovalController GetWarrantyTypesRSAProviderRegionsCommissionTypesCommodityUsageTypesDealTypes: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 09:24:26.3222 TAS.Web.Controllers.ApiManagerForPolicyApprovalController GetAllItemStatussCylinderCountEngineCapacityVehicleWeightBasedOns: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 09:24:55.9591 TAS.Web.Controllers.ApiManagerForPolicyApprovalController GetCountryDealerProductCommoditiesInsures: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 09:24:58.8617 TAS.Web.Controllers.ApiManagerForPolicyApprovalController GetWarrantyTypesRSAProviderRegionsCommissionTypesCommodityUsageTypesDealTypes: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 09:24:58.9277 TAS.Web.Controllers.ApiManagerForPolicyApprovalController GetAllItemStatussCylinderCountEngineCapacityVehicleWeightBasedOns: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 09:28:17.1436 TAS.Web.Controllers.ApiManagerForPolicyApprovalController GetWarrantyTypesRSAProviderRegionsCommissionTypesCommodityUsageTypesDealTypes: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 09:28:17.2476 TAS.Web.Controllers.ApiManagerForPolicyApprovalController GetCountryDealerProductCommoditiesInsures: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 09:28:17.2476 TAS.Web.Controllers.ApiManagerForPolicyApprovalController GetAllItemStatussCylinderCountEngineCapacityVehicleWeightBasedOns: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 09:29:33.6204 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:29:33.6484 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:29:33.6744 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:29:33.6994 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:30:42.4382 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:30:42.4682 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:30:42.4962 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:30:42.5222 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:30:50.9237 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:30:50.9557 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:30:50.9968 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:30:51.0318 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:31:24.0463 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:31:24.0753 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:31:24.1173 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:31:24.1463 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:31:35.1830 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:31:35.2100 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:31:35.2360 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:31:35.2620 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:35:23.6847 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:35:23.7117 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:35:23.7387 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:35:23.7647 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:36:35.4615 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:36:35.4905 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:36:35.5205 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:36:35.5535 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:37:26.6497 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:37:26.6793 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:37:26.7063 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:37:26.7353 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:37:50.0933 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:37:50.1233 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:37:50.1553 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:37:50.1863 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:38:26.7602 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:38:26.7911 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:38:26.8241 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:38:26.8521 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:38:49.0707 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:38:49.1007 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:38:49.1327 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:38:49.1677 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:41:26.9831 TAS.Services.Entities.Management.ContractEntityManager GetAllAttributeSpecificationsByInsuranceLimitationId: exception: PartialEvalException (NullReferenceException ("Object reference not set to an instance of an object."), null.Id), 
2021-06-09 09:41:34.8078 TAS.Services.Entities.Management.ContractEntityManager GetAllAttributeSpecificationsByInsuranceLimitationId: exception: PartialEvalException (NullReferenceException ("Object reference not set to an instance of an object."), null.Id), 
2021-06-09 09:43:27.7865 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:43:27.8225 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:43:27.8575 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:43:27.8904 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:43:52.1727 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:43:52.2047 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:43:52.2427 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:43:52.2745 TAS.Services.Entities.Management.CommonEntityManager getAddonTypeCodeById: exception: Specified method is not supported., 
2021-06-09 09:45:45.0112 TAS.Web.Controllers.UploadController UploadAttachment: exception: could not execute batch command.[SQL: SQL not available], System.Data.SqlClient.SqlException (0x80131904): Invalid column name 'UserId'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at System.Data.SqlClient.SqlCommand.ExecuteBatchRPCCommand()
   at System.Data.SqlClient.SqlCommandSet.ExecuteNonQuery()
   at lambda_method(Closure , Object )
   at NHibernate.AdoNet.SqlClientSqlCommandSet.ExecuteNonQuery()
   at NHibernate.AdoNet.SqlClientBatchingBatcher.DoExecuteBatch(IDbCommand ps)
ClientConnectionId:d4089e99-76d6-4398-8614-bbe1e09610bc
Error Number:207,State:1,Class:16
2021-06-09 10:04:58.1941 TAS.Web.Controllers.UploadController UploadAttachment: exception: could not execute batch command.[SQL: SQL not available], System.Data.SqlClient.SqlException (0x80131904): Invalid column name 'UserId'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at System.Data.SqlClient.SqlCommand.ExecuteBatchRPCCommand()
   at System.Data.SqlClient.SqlCommandSet.ExecuteNonQuery()
   at lambda_method(Closure , Object )
   at NHibernate.AdoNet.SqlClientSqlCommandSet.ExecuteNonQuery()
   at NHibernate.AdoNet.SqlClientBatchingBatcher.DoExecuteBatch(IDbCommand ps)
ClientConnectionId:1d5eafa8-8c96-4f81-acb5-bd6592a52176
Error Number:207,State:1,Class:16
2021-06-09 10:06:13.5794 TAS.Web.Controllers.UploadController UploadAttachment: exception: could not execute batch command.[SQL: SQL not available], System.Data.SqlClient.SqlException (0x80131904): Invalid column name 'UserId'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at System.Data.SqlClient.SqlCommand.ExecuteBatchRPCCommand()
   at System.Data.SqlClient.SqlCommandSet.ExecuteNonQuery()
   at lambda_method(Closure , Object )
   at NHibernate.AdoNet.SqlClientSqlCommandSet.ExecuteNonQuery()
   at NHibernate.AdoNet.SqlClientBatchingBatcher.DoExecuteBatch(IDbCommand ps)
ClientConnectionId:4c59cedc-88c4-4952-b189-27596a70f8e3
Error Number:207,State:1,Class:16
2021-06-09 10:13:08.6570 TAS.Web.Controllers.DealerManagementController GetAllDealerLocationsByUserId: exception: Object reference not set to an instance of an object., 
2021-06-09 10:13:08.8055 TAS.Web.Controllers.MakeAndModelManagementController GetAllCommodities: exception: Object reference not set to an instance of an object., 
2021-06-09 10:13:08.8465 TAS.Web.Controllers.DealerManagementController UserValidationDealerInvoiceCode: exception: Object reference not set to an instance of an object., 
2021-06-09 10:26:46.3507 TAS.Services.Common.Notification.EmailService Email Service : A recipient must be specified.
2021-06-09 10:27:55.8223 TAS.Services.Entities.Management.ClaimEntityManager GoodwillAuthorizationByUserId: exception: Object reference not set to an instance of an object., 
2021-06-09 10:29:08.3375 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 10:33:52.5020 TAS.Services.Entities.Management.NotificationEntityManager MoveNext: exception: An error occurred while sending the request., System.Net.WebException: The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel. ---> System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure.
   at System.Net.TlsStream.EndWrite(IAsyncResult asyncResult)
   at System.Net.PooledStream.EndWrite(IAsyncResult asyncResult)
   at System.Net.ConnectStream.WriteHeadersCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
2021-06-09 10:36:12.2452 TAS.Services.Common.Notification.EmailService Email Service : A recipient must be specified.
2021-06-09 10:50:51.3110 TAS.Web.Controllers.ClaimController SubmitOtherTireClaim: exception: Invalid length for a Base-64 char array or string., 
2021-06-09 10:59:00.4471 TAS.Services.Common.Notification.EmailService Email Service : A recipient must be specified.
2021-06-09 10:59:12.9115 TAS.Services.Entities.Management.ClaimEntityManager GoodwillAuthorizationByUserId: exception: Object reference not set to an instance of an object., 
2021-06-09 11:00:06.3950 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 11:01:47.5359 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 11:08:10.9511 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 11:08:41.3423 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 11:09:05.6061 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 11:10:35.1414 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 11:17:25.2491 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 11:18:38.2889 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 11:18:38.6460 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 11:18:59.8072 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 12:02:30.3681 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 12:03:56.3493 TAS.Services.Common.Notification.EmailService Email Service : A recipient must be specified.
2021-06-09 12:04:04.9208 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 12:04:28.9407 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 13:06:52.2284 TAS.Services.Common.Notification.EmailService Email Service : A recipient must be specified.
2021-06-09 13:08:18.2052 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 13:13:41.7363 TAS.Web.Controllers.ClaimController SubmitOtherTireClaim: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 13:14:10.5874 TAS.Web.Controllers.ClaimController SubmitOtherTireClaim: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 13:14:39.7173 TAS.Web.Controllers.ClaimController SubmitOtherTireClaim: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 13:14:57.0454 TAS.Web.Controllers.ClaimController SubmitOtherTireClaim: exception: Processing of the HTTP request resulted in an exception. Please see the HTTP response returned by the 'Response' property of this exception for details., 
2021-06-09 13:17:04.4991 TAS.Services.Common.Notification.EmailService Email Service : A recipient must be specified.
2021-06-09 13:17:25.0466 TAS.Services.Entities.Management.EntityCacheData GetTPADetailById: exception: could not execute query
[ select tpa0_.Id as col_0_0_, tpa0_.TpaCode as col_1_0_, tpa0_.Address as col_2_0_, tpa0_.Banner as col_3_0_, tpa0_.Banner2 as col_4_0_, tpa0_.Banner3 as col_5_0_, tpa0_.Banner4 as col_6_0_, tpa0_.Banner5 as col_7_0_, tpa0_.DiscountDescription as col_8_0_, tpa0_.Logo as col_9_0_, tpa0_.Name as col_10_0_, tpa0_.TelNumber as col_11_0_, tpa0_.OriginalTPAName as col_12_0_ from TPA tpa0_ where tpa0_.Id=@p0 ]
  Name:p1 - Value:8cb77627-7825-4e25-be45-ae903eb63d4d
[SQL: select tpa0_.Id as col_0_0_, tpa0_.TpaCode as col_1_0_, tpa0_.Address as col_2_0_, tpa0_.Banner as col_3_0_, tpa0_.Banner2 as col_4_0_, tpa0_.Banner3 as col_5_0_, tpa0_.Banner4 as col_6_0_, tpa0_.Banner5 as col_7_0_, tpa0_.DiscountDescription as col_8_0_, tpa0_.Logo as col_9_0_, tpa0_.Name as col_10_0_, tpa0_.TelNumber as col_11_0_, tpa0_.OriginalTPAName as col_12_0_ from TPA tpa0_ where tpa0_.Id=@p0], System.Data.SqlClient.SqlException (0x80131904): Invalid object name 'TPA'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)
   at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer)
ClientConnectionId:2709e548-732c-44e7-bf52-c24ac81de67d
Error Number:208,State:1,Class:16
2021-06-09 13:19:06.9101 TAS.Services.Entities.Management.ClaimEntityManager GetPolicyDetailsForView: exception: Object reference not set to an instance of an object., 
2021-06-09 13:22:56.7152 TAS.Services.Common.Notification.EmailService Email Service : A recipient must be specified.
2021-06-09 15:00:59.9282 TAS.Services.Entities.Management.EntityCacheData GetTPADetailById: exception: could not execute query
[ select tpa0_.Id as col_0_0_, tpa0_.TpaCode as col_1_0_, tpa0_.Address as col_2_0_, tpa0_.Banner as col_3_0_, tpa0_.Banner2 as col_4_0_, tpa0_.Banner3 as col_5_0_, tpa0_.Banner4 as col_6_0_, tpa0_.Banner5 as col_7_0_, tpa0_.DiscountDescription as col_8_0_, tpa0_.Logo as col_9_0_, tpa0_.Name as col_10_0_, tpa0_.TelNumber as col_11_0_, tpa0_.OriginalTPAName as col_12_0_ from TPA tpa0_ where tpa0_.Id=@p0 ]
  Name:p1 - Value:8cb77627-7825-4e25-be45-ae903eb63d4d
[SQL: select tpa0_.Id as col_0_0_, tpa0_.TpaCode as col_1_0_, tpa0_.Address as col_2_0_, tpa0_.Banner as col_3_0_, tpa0_.Banner2 as col_4_0_, tpa0_.Banner3 as col_5_0_, tpa0_.Banner4 as col_6_0_, tpa0_.Banner5 as col_7_0_, tpa0_.DiscountDescription as col_8_0_, tpa0_.Logo as col_9_0_, tpa0_.Name as col_10_0_, tpa0_.TelNumber as col_11_0_, tpa0_.OriginalTPAName as col_12_0_ from TPA tpa0_ where tpa0_.Id=@p0], System.Data.SqlClient.SqlException (0x80131904): Invalid object name 'TPA'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)
   at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer)
ClientConnectionId:f9331074-a104-45f4-8ca8-fd5fcf707061
Error Number:208,State:1,Class:16
2021-06-09 15:01:33.2975 TAS.Services.Entities.Management.BordxEntityManager GetConfirmedBordxForExport: exception: could not execute query
[ 
SELECT Row_number()
  OVER(
    ORDER BY D.autoId) as SNo, * FROM (
SELECT DISTINCT
---------------------------------
b.EntryDateTime													AS		BDXExtractDate,
rec.uwyear                                                      AS		UnderWriterYear,
re.reinsurername                                                AS		ReinsurerName,
p.policyNo														AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode												AS		InvoiceCode,
ceid.InvoiceNumber												AS      InvoiceNumber, -- New Feild
i.insurershortname                                              AS		CedentName,
''																AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																AS		FirstName,
' '                                                             AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
                                                                AS		LastName,
''																AS		CoBuyer,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                AS		Address,
' '                                                             AS		POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                AS		Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
	CONVERT(VARCHAR, cust.mobileno + ' ')	
	END
														        AS		MobileNumber,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                AS		City,
con.CountryName													AS		Country,
p.EntryDateTime													AS		SystemTransactionDate,
p.UniqueRef														AS		SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  			AS		BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)										AS		BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS		DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																AS		Status,
''																AS		CoverType,
wt.WarrantyTypeDescription										AS		WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName												AS		Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber													AS		PlateNumber,
cc.CommodityCategoryDescription									AS		Category,
''																AS		Manufacture,
''																AS		Model,
''																AS		Variant,
cyc.[count]                                                     AS		CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END																AS		FourByFour,
''																AS		Hybrid,
''																AS		ElectricVehicle,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                          AS		EngineCapacity,
Convert(varchar(25),vd.GrossWeight) + ' T'                      AS		Gvw,
vd.modelyear                                                    AS		ModelYear,
p.PolicySoldDate                                                AS		PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                             
'-'																AS		VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                             
'-'																AS		VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                             AS		ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END															    AS		ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                             AS		MileageLimitationInKMs,
''																AS		ManfCoverHours,
dbo.checkAvailableByPolicyIdAndPosition('FL',p.id)				AS		FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id)				AS		FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id)				AS		RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id)				AS		RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id)				AS		SP,
m.makename                                                      AS		TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') AS	F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									 AS		NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F')		AS		F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F')AS		F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F')	AS		F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F')	AS		F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F')	AS		F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') AS	R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)									AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R')		AS		R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R')AS		R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R')	AS		R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R')	AS		R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R')	AS		R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																AS		DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                             AS		DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                  AS		ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'															 AS		ExtentionDurationInHours,
 'N/A'															 AS		HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
																AS		MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),
			p.MWStartDate)<= p.PolicySoldDate
			AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
																AS		CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)					AS		TotalLiability,
'1 per Tyre'													AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,


--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)       AS		MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)     AS		InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         
																AS			InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)AS			DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
--- Isnull((SELECT CASE
--								WHEN ccm.ispercentage = 1 THEN ccm.commission *
--										(CASE WHEN ccm.isonnrp = 1 THEN
--										p.NRP
--										ELSE
--										p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
--										END)
--										/ 100
--					ELSE ccm.commission
--					END
--						FROM   nrpcommissioncontractmapping ccm
--							INNER JOIN nrpcommissiontypes cot
--									ON cot.id = ccm.nrpcommissionid
--						WHERE  ccm.contractid = c.id
--					AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)
																	AS		GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            
																	AS		Brokerage,
p.NRP 							AS		NRP,
 p.LocalCurrencyConversionRate										AS		ConversionRate,
p.NRP																AS		USD_NRP,
ph.transactiontypeid                                                AS		TransactionTypeId,
ptt.code                                                            AS
TransactionTypeCode,
p.contractid                                                          AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

--inctd.SerialNumber												as SerialNumber
--citd.UnUsedTireDepth
FROM   policy p

       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = p.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = p.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = p.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = p.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = p.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
		LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN extensiontype e
              ON e.id = p.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = p.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = p.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = p.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = p.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetails vd
              ON vd.id = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetails bwd
              ON bwd.id = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
       LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetails ygd
              ON ygd.id = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
			ON va.id = ( CASE
                        WHEN ct.commoditycode = 'A' THEN vd.Variant
                        --WHEN ct.commoditycode = 'E' THEN bwd.modelid
                        WHEN ct.commoditycode = 'O' THEN oid.VariantId
                        --WHEN ct.commoditycode = 'Y' THEN ygd.modelid
						END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
		LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId

       LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId
		LEFT JOIN warrantytype wt
              ON wt.id = cep.WarrentyTypeId
       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
	   LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = p.salespersonid
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
		LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
		LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	    LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
		LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
		LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
		LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	   LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
GROUP  BY
			p.id,
			p.policyNo,
			c.id,
			p.EntryDateTime	,
			b.EntryDateTime,
			rec.uwyear,
			re.reinsurername,
			i.insurershortname,
			b.month,
			b.year,
			CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month)      ,
			c.dealname,
			dt.NAME,
			c.isactive,
			wt.warrantytypedescription,
			p.hrsusedatpolicysale,
			d.dealername,
			dl.location,
			cust.address1,
			cust.address2,
			cust.address3,
			city.cityname,
			city.zipcode,
			cust.mobileno,
			its.status,
			vd.vinno,
			vd.plateno,
			cc.commoditycategorydescription,
			m.makename,
			mo.modelname,
			va.VariantName,
			cyc.[count],
			enc.mesuretype,
			enc.enginecapacitynumber,
			vd.modelyear,
			vd.itempurchaseddate,
			mw.warrantymonths,
			mw.warrantykm,
			mo.noofdaystoriskstart,
			p.policyenddate,
			ce.attributespecification,
			p.premium,
			p.NRP,
			rec.contractno,
			cc.commoditycategorycode,
			p.policyno,
			cust.firstname,
			cust.lastname,
			rec.contractno,
			c.startdate,
			c.enddate,
			ct.commoditytypedescription,
			curr.code,
			p.policyno,
			city.cityname,
			con.countryname,
			p.policystartdate,
			p.policyenddate,
			cust.businessname,
			p.comment,
			c.liabilitylimitation,
			ct.commoditycode,
			bwd.itempurchaseddate,
			oid.itempurchaseddate,
			ygd.itempurchaseddate,
			reccon.id,
			reccon.countryname,
			reccon.currencyid,
			reccurr.currencyname,
			p.currencyperiodid,
			p.localcurrencyconversionrate,
			ph.transactiontypeid,
			ptt.code,
			vd.dealerprice,
			bwd.dealerprice,
			oid.dealerprice,
			ygd.dealerprice,
			pboNett.code,
			p.Premium,
			pboGross.code,
			SalesUser.firstname,
			SalesUser.lastname,
			dlc.cityname,
			tpab.branchcode,
			con.countrycode,
			p.uniqueref,
			prt.code,
			p.contractid,
			p.grosspremiumbeforetax,
			p.nrp,
			il.Months,
			il.Km,
			il.TopOfMW,
			vd.GrossWeight,
			p.BookletNumber,
			bk.Name,
			p.MWStartDate,
			p.TotalTax,
			vpa.Id,
			p.Co_Customer,
			custType.CustomerTypeName,
			cust.BusinessName,
			cust.BusinessTelNo,
			cust.BusinessAddress1,
			cust.BusinessAddress2,
			cust.BusinessAddress3,
			cust.BusinessAddress4,
			p.GrossPremiumBeforeTax,
			p.PolicySoldDate,
			vd.RegistrationDate,
			p.MWIsAvailable,
			p.LocalCurrencyConversionRate,
			p.MWIsAvailable,
			mw.IsUnlimited,
			ic.Code,
			ceid.InvoiceNumber,
			ic.PlateNumber,
			apmd.MakeName,
			apmodeld.ModelName,
			ceid.AdditionalDetailsModelYear,
			ceid.AdditionalDetailsMileage,
			ic.TireQuantity,
			inctd.ArticleNumber		,
			atsp.Pattern,
			c.AnnualInterestRate,
			il.Months ,
			c.LiabilityLimitation,
			p.MonthlyEMI,
			b.Number,
			i.InsurerFullName,
			vd.GrossWeight,
			c.ClaimLimitation,
			vari.VariantName,
			ats.TirePrice,
			ceid.InvoiceCode,
			ats.OriginalTireDepth

			--inctd.SerialNumber
UNION
SELECT DISTINCT
---------------------------------
b.EntryDateTime														  AS		BDXExtractDate,
rec.uwyear                                                            AS		UnderWriterYear,
re.reinsurername                                                      AS		ReinsurerName,
p.policyNo															  AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode													  AS		InvoiceCode,
ceid.InvoiceNumber													  AS      InvoiceNumber, -- New Feild
i.insurershortname                                                    AS		CedentName,
''																	  AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																	  AS		FirstName,
' '                                                                   AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
																	  AS LastName,
''																	  AS CoBuyer
,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                    AS Address
,
' '                                                               AS POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                    AS Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.mobileno + ' '
	END
														            AS MobileNumber,
	CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                    AS City,
	con.CountryName													AS Country,
-----------------------------------------------------
p.EntryDateTime AS SystemTransactionDate,
p.UniqueRef As
SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  													AS BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)											AS BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																	AS Status,
''																AS		CoverType,
wt.WarrantyTypeDescription											AS WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName													AS Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber														AS PlateNumber,
cc.CommodityCategoryDescription										AS Category,
''                                                          AS Manufacture,
''                                                         AS Model,
''                                                       as Variant,
cyc.[count]                                                           AS
CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END AS FourByFour,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                                AS
EngineCapacity,
''																AS Hybrid,
''																AS ElectricVehicle,
Convert(varchar(25),vd.GrossWeight) + ' T'                        AS
Gvw,
vd.modelyear                                                   AS ModelYear,
p.PolicySoldDate                                                      As  PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                                   
'-'	 AS VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                                   
'-'	AS VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                                   AS ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END																	  AS ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                                    AS MileageLimitationInKMs,
''																		AS ManfCoverHours,

dbo.checkAvailableByPolicyIdAndPosition('FL',p.id) as FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id) as FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id) as RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id) as RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id) as SP,
m.makename                                                          AS TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') as F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									AS NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F') as F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F') as F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F') as F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F') as F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F') as F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') as R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)						AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R') as R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R') as R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R') as R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R') as R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R') as R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																	  AS DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                                  AS DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                       AS ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'																		AS ExtentionDurationInHours,
 'N/A'																	AS HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
 AS
MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),p.MWStartDate)<= p.PolicySoldDate
	AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
 AS
CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE  CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)													AS		TotalLiability,
'1 per Tyre'																AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,
--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)            AS
MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)          AS
InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         AS
InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)         AS
DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
		AS GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            AS Brokerage,
p.NRP  AS NRP,
 p.LocalCurrencyConversionRate AS ConversionRate,
 p.NRP AS USD_NRP,
ph.transactiontypeid                                                  AS
TransactionTypeId,
'EndorsementOld'                                                      AS
TransactionTypeCode,
ph.contractid                                                         AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

FROM   policy p
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN warrantytype wt
              ON wt.id = ph.covertypeid
       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = ph.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = ph.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = ph.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = ph.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = ph.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
	    LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
       LEFT JOIN extensiontype e
              ON e.id = ph.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = ph.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = ph.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = ph.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = ph.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetailshistory vd
              ON vd.vehicledetailsid = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetailshistory bwd
              ON bwd.brownandwhitedetailsid = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
		LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN otheritemdetailshistory oidh
              ON oidh.otheritemdetailsid = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetailshistory ygd
              ON ygd.yellowgooddetailsid = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
		ON va.id = ( CASE
					WHEN ct.commoditycode = 'A' THEN vd.Variant
					--WHEN ct.commoditycode = 'E' THEN bwd.modelid
					WHEN ct.commoditycode = 'O' THEN oid.VariantId
					--WHEN ct.commoditycode = 'Y' THEN ygd.modelid
					END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
     	LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId
     LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId

       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
		 LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = ph.salespersonid
           LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
	   LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
	  LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	  LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
	  LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
	  LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
	  LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	  LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
       AND ptt.code = 'Endorsement'
GROUP  BY
		p.id,
		p.policyNo,
		c.id,
		p.EntryDateTime	,
		b.EntryDateTime,
		rec.uwyear,
		re.reinsurername,
		i.insurershortname,
		b.month,
		b.year,
		CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month) ,
		c.dealname,
		dt.NAME,
		c.isactive,
		wt.warrantytypedescription,
		ph.hrsusedatpolicysale,
		d.dealername,
		dl.location,
		cust.address1,
		cust.address2,
		cust.address3,
		city.cityname,
		city.zipcode,
		cust.mobileno,
		its.status,
		vd.vinno,
		vd.plateno,
		cc.commoditycategorydescription,
		m.makename,
		mo.modelname,
		va.VariantName,
		cyc.[count],
		enc.mesuretype,
		enc.enginecapacitynumber,
		vd.modelyear,
		vd.itempurchaseddate,
		mw.warrantymonths,
		mw.warrantykm,
		mo.noofdaystoriskstart,
		ph.policyenddate,
		ce.attributespecification,
		ph.premium,
		rec.contractno,
		cc.commoditycategorycode,
		ph.policyno,
		cust.firstname,
		cust.lastname,
		rec.contractno,
		c.startdate,
		c.enddate,
		ct.commoditytypedescription,
		curr.code,
		ph.policyno,
		city.cityname,
		con.countryname,
		ph.policystartdate,
		ph.policyenddate,
		cust.businessname,
		ph.comment,
		c.liabilitylimitation,
		ct.commoditycode,
		bwd.itempurchaseddate,
		oid.itempurchaseddate,
		ygd.itempurchaseddate,
		reccon.id,
		reccon.countryname,
		reccon.currencyid,
		reccurr.currencyname,
		ph.currencyperiodid,
		p.localcurrencyconversionrate,
		ph.transactiontypeid,
		ptt.code,
		ph.id,
		vd.dealerprice,
		bwd.dealerprice,
		oid.dealerprice,
		ygd.dealerprice,
		pboNett.code,
		p.Premium,
		pboGross.code,
		SalesUser.firstname,
		SalesUser.lastname,
		dlc.cityname,
		tpab.branchcode,
		con.countrycode,
		p.uniqueref,
		prt.code,
		ph.contractid,
		p.grosspremiumbeforetax,
		p.nrp,
		p.BookletNumber  ,
		bk.Name,
		p.MWStartDate,
		il.Months,
		il.TopOfMW,
		il.Km,
		vpa.Id,
		p.Co_Customer,
		custType.CustomerTypeName,
		cust.BusinessName,
		cust.BusinessTelNo,
		cust.BusinessAddress1,
		cust.BusinessAddress2,
		cust.BusinessAddress3,
		cust.BusinessAddress4,
		p.GrossPremiumBeforeTax,
		p.PolicySoldDate,
		vd.RegistrationDate,
		p.LocalCurrencyConversionRate,
		p.MWIsAvailable,
		p.HrsUsedAtPolicySale,
		mw.IsUnlimited,
		ic.Code,
		ceid.InvoiceNumber,
		ic.PlateNumber,
		apmd.MakeName,
		apmodeld.ModelName,
		ceid.AdditionalDetailsModelYear,
		ceid.AdditionalDetailsMileage,
		ic.TireQuantity,
		inctd.ArticleNumber	,
		atsp.Pattern,
		c.AnnualInterestRate,
		il.Months ,
		c.LiabilityLimitation,
		p.MonthlyEMI,
		b.Number,
		i.InsurerFullName,
		vd.GrossWeight,
		c.ClaimLimitation,
		p.TotalTax,
		vari.VariantName,
		ats.TirePrice,
		ceid.InvoiceCode,
		ats.OriginalTireDepth

		--inctd.SerialNumber
		) D
		Order By D.autoId

 ]
[SQL: 
SELECT Row_number()
  OVER(
    ORDER BY D.autoId) as SNo, * FROM (
SELECT DISTINCT
---------------------------------
b.EntryDateTime													AS		BDXExtractDate,
rec.uwyear                                                      AS		UnderWriterYear,
re.reinsurername                                                AS		ReinsurerName,
p.policyNo														AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode												AS		InvoiceCode,
ceid.InvoiceNumber												AS      InvoiceNumber, -- New Feild
i.insurershortname                                              AS		CedentName,
''																AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																AS		FirstName,
' '                                                             AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
                                                                AS		LastName,
''																AS		CoBuyer,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                AS		Address,
' '                                                             AS		POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                AS		Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
	CONVERT(VARCHAR, cust.mobileno + ' ')	
	END
														        AS		MobileNumber,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                AS		City,
con.CountryName													AS		Country,
p.EntryDateTime													AS		SystemTransactionDate,
p.UniqueRef														AS		SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  			AS		BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)										AS		BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS		DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																AS		Status,
''																AS		CoverType,
wt.WarrantyTypeDescription										AS		WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName												AS		Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber													AS		PlateNumber,
cc.CommodityCategoryDescription									AS		Category,
''																AS		Manufacture,
''																AS		Model,
''																AS		Variant,
cyc.[count]                                                     AS		CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END																AS		FourByFour,
''																AS		Hybrid,
''																AS		ElectricVehicle,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                          AS		EngineCapacity,
Convert(varchar(25),vd.GrossWeight) + ' T'                      AS		Gvw,
vd.modelyear                                                    AS		ModelYear,
p.PolicySoldDate                                                AS		PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                             
'-'																AS		VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                             
'-'																AS		VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                             AS		ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END															    AS		ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                             AS		MileageLimitationInKMs,
''																AS		ManfCoverHours,
dbo.checkAvailableByPolicyIdAndPosition('FL',p.id)				AS		FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id)				AS		FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id)				AS		RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id)				AS		RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id)				AS		SP,
m.makename                                                      AS		TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') AS	F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									 AS		NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F')		AS		F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F')AS		F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F')	AS		F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F')	AS		F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F')	AS		F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') AS	R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)									AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R')		AS		R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R')AS		R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R')	AS		R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R')	AS		R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R')	AS		R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																AS		DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                             AS		DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                  AS		ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'															 AS		ExtentionDurationInHours,
 'N/A'															 AS		HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
																AS		MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),
			p.MWStartDate)<= p.PolicySoldDate
			AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
																AS		CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)					AS		TotalLiability,
'1 per Tyre'													AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,


--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)       AS		MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)     AS		InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         
																AS			InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)AS			DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
--- Isnull((SELECT CASE
--								WHEN ccm.ispercentage = 1 THEN ccm.commission *
--										(CASE WHEN ccm.isonnrp = 1 THEN
--										p.NRP
--										ELSE
--										p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
--										END)
--										/ 100
--					ELSE ccm.commission
--					END
--						FROM   nrpcommissioncontractmapping ccm
--							INNER JOIN nrpcommissiontypes cot
--									ON cot.id = ccm.nrpcommissionid
--						WHERE  ccm.contractid = c.id
--					AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)
																	AS		GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            
																	AS		Brokerage,
p.NRP 							AS		NRP,
 p.LocalCurrencyConversionRate										AS		ConversionRate,
p.NRP																AS		USD_NRP,
ph.transactiontypeid                                                AS		TransactionTypeId,
ptt.code                                                            AS
TransactionTypeCode,
p.contractid                                                          AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

--inctd.SerialNumber												as SerialNumber
--citd.UnUsedTireDepth
FROM   policy p

       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = p.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = p.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = p.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = p.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = p.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
		LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN extensiontype e
              ON e.id = p.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = p.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = p.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = p.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = p.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetails vd
              ON vd.id = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetails bwd
              ON bwd.id = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
       LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetails ygd
              ON ygd.id = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
			ON va.id = ( CASE
                        WHEN ct.commoditycode = 'A' THEN vd.Variant
                        --WHEN ct.commoditycode = 'E' THEN bwd.modelid
                        WHEN ct.commoditycode = 'O' THEN oid.VariantId
                        --WHEN ct.commoditycode = 'Y' THEN ygd.modelid
						END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
		LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId

       LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId
		LEFT JOIN warrantytype wt
              ON wt.id = cep.WarrentyTypeId
       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
	   LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = p.salespersonid
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
		LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
		LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	    LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
		LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
		LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
		LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	   LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
GROUP  BY
			p.id,
			p.policyNo,
			c.id,
			p.EntryDateTime	,
			b.EntryDateTime,
			rec.uwyear,
			re.reinsurername,
			i.insurershortname,
			b.month,
			b.year,
			CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month)      ,
			c.dealname,
			dt.NAME,
			c.isactive,
			wt.warrantytypedescription,
			p.hrsusedatpolicysale,
			d.dealername,
			dl.location,
			cust.address1,
			cust.address2,
			cust.address3,
			city.cityname,
			city.zipcode,
			cust.mobileno,
			its.status,
			vd.vinno,
			vd.plateno,
			cc.commoditycategorydescription,
			m.makename,
			mo.modelname,
			va.VariantName,
			cyc.[count],
			enc.mesuretype,
			enc.enginecapacitynumber,
			vd.modelyear,
			vd.itempurchaseddate,
			mw.warrantymonths,
			mw.warrantykm,
			mo.noofdaystoriskstart,
			p.policyenddate,
			ce.attributespecification,
			p.premium,
			p.NRP,
			rec.contractno,
			cc.commoditycategorycode,
			p.policyno,
			cust.firstname,
			cust.lastname,
			rec.contractno,
			c.startdate,
			c.enddate,
			ct.commoditytypedescription,
			curr.code,
			p.policyno,
			city.cityname,
			con.countryname,
			p.policystartdate,
			p.policyenddate,
			cust.businessname,
			p.comment,
			c.liabilitylimitation,
			ct.commoditycode,
			bwd.itempurchaseddate,
			oid.itempurchaseddate,
			ygd.itempurchaseddate,
			reccon.id,
			reccon.countryname,
			reccon.currencyid,
			reccurr.currencyname,
			p.currencyperiodid,
			p.localcurrencyconversionrate,
			ph.transactiontypeid,
			ptt.code,
			vd.dealerprice,
			bwd.dealerprice,
			oid.dealerprice,
			ygd.dealerprice,
			pboNett.code,
			p.Premium,
			pboGross.code,
			SalesUser.firstname,
			SalesUser.lastname,
			dlc.cityname,
			tpab.branchcode,
			con.countrycode,
			p.uniqueref,
			prt.code,
			p.contractid,
			p.grosspremiumbeforetax,
			p.nrp,
			il.Months,
			il.Km,
			il.TopOfMW,
			vd.GrossWeight,
			p.BookletNumber,
			bk.Name,
			p.MWStartDate,
			p.TotalTax,
			vpa.Id,
			p.Co_Customer,
			custType.CustomerTypeName,
			cust.BusinessName,
			cust.BusinessTelNo,
			cust.BusinessAddress1,
			cust.BusinessAddress2,
			cust.BusinessAddress3,
			cust.BusinessAddress4,
			p.GrossPremiumBeforeTax,
			p.PolicySoldDate,
			vd.RegistrationDate,
			p.MWIsAvailable,
			p.LocalCurrencyConversionRate,
			p.MWIsAvailable,
			mw.IsUnlimited,
			ic.Code,
			ceid.InvoiceNumber,
			ic.PlateNumber,
			apmd.MakeName,
			apmodeld.ModelName,
			ceid.AdditionalDetailsModelYear,
			ceid.AdditionalDetailsMileage,
			ic.TireQuantity,
			inctd.ArticleNumber		,
			atsp.Pattern,
			c.AnnualInterestRate,
			il.Months ,
			c.LiabilityLimitation,
			p.MonthlyEMI,
			b.Number,
			i.InsurerFullName,
			vd.GrossWeight,
			c.ClaimLimitation,
			vari.VariantName,
			ats.TirePrice,
			ceid.InvoiceCode,
			ats.OriginalTireDepth

			--inctd.SerialNumber
UNION
SELECT DISTINCT
---------------------------------
b.EntryDateTime														  AS		BDXExtractDate,
rec.uwyear                                                            AS		UnderWriterYear,
re.reinsurername                                                      AS		ReinsurerName,
p.policyNo															  AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode													  AS		InvoiceCode,
ceid.InvoiceNumber													  AS      InvoiceNumber, -- New Feild
i.insurershortname                                                    AS		CedentName,
''																	  AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																	  AS		FirstName,
' '                                                                   AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
																	  AS LastName,
''																	  AS CoBuyer
,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                    AS Address
,
' '                                                               AS POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                    AS Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.mobileno + ' '
	END
														            AS MobileNumber,
	CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                    AS City,
	con.CountryName													AS Country,
-----------------------------------------------------
p.EntryDateTime AS SystemTransactionDate,
p.UniqueRef As
SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  													AS BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)											AS BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																	AS Status,
''																AS		CoverType,
wt.WarrantyTypeDescription											AS WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName													AS Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber														AS PlateNumber,
cc.CommodityCategoryDescription										AS Category,
''                                                          AS Manufacture,
''                                                         AS Model,
''                                                       as Variant,
cyc.[count]                                                           AS
CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END AS FourByFour,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                                AS
EngineCapacity,
''																AS Hybrid,
''																AS ElectricVehicle,
Convert(varchar(25),vd.GrossWeight) + ' T'                        AS
Gvw,
vd.modelyear                                                   AS ModelYear,
p.PolicySoldDate                                                      As  PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                                   
'-'	 AS VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                                   
'-'	AS VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                                   AS ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END																	  AS ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                                    AS MileageLimitationInKMs,
''																		AS ManfCoverHours,

dbo.checkAvailableByPolicyIdAndPosition('FL',p.id) as FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id) as FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id) as RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id) as RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id) as SP,
m.makename                                                          AS TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') as F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									AS NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F') as F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F') as F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F') as F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F') as F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F') as F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') as R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)						AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R') as R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R') as R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R') as R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R') as R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R') as R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																	  AS DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                                  AS DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                       AS ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'																		AS ExtentionDurationInHours,
 'N/A'																	AS HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
 AS
MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),p.MWStartDate)<= p.PolicySoldDate
	AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
 AS
CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE  CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)													AS		TotalLiability,
'1 per Tyre'																AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,
--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)            AS
MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)          AS
InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         AS
InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)         AS
DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
		AS GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            AS Brokerage,
p.NRP  AS NRP,
 p.LocalCurrencyConversionRate AS ConversionRate,
 p.NRP AS USD_NRP,
ph.transactiontypeid                                                  AS
TransactionTypeId,
'EndorsementOld'                                                      AS
TransactionTypeCode,
ph.contractid                                                         AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

FROM   policy p
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN warrantytype wt
              ON wt.id = ph.covertypeid
       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = ph.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = ph.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = ph.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = ph.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = ph.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
	    LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
       LEFT JOIN extensiontype e
              ON e.id = ph.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = ph.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = ph.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = ph.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = ph.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetailshistory vd
              ON vd.vehicledetailsid = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetailshistory bwd
              ON bwd.brownandwhitedetailsid = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
		LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN otheritemdetailshistory oidh
              ON oidh.otheritemdetailsid = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetailshistory ygd
              ON ygd.yellowgooddetailsid = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
		ON va.id = ( CASE
					WHEN ct.commoditycode = 'A' THEN vd.Variant
					--WHEN ct.commoditycode = 'E' THEN bwd.modelid
					WHEN ct.commoditycode = 'O' THEN oid.VariantId
					--WHEN ct.commoditycode = 'Y' THEN ygd.modelid
					END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
     	LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId
     LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId

       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
		 LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = ph.salespersonid
           LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
	   LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
	  LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	  LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
	  LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
	  LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
	  LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	  LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
       AND ptt.code = 'Endorsement'
GROUP  BY
		p.id,
		p.policyNo,
		c.id,
		p.EntryDateTime	,
		b.EntryDateTime,
		rec.uwyear,
		re.reinsurername,
		i.insurershortname,
		b.month,
		b.year,
		CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month) ,
		c.dealname,
		dt.NAME,
		c.isactive,
		wt.warrantytypedescription,
		ph.hrsusedatpolicysale,
		d.dealername,
		dl.location,
		cust.address1,
		cust.address2,
		cust.address3,
		city.cityname,
		city.zipcode,
		cust.mobileno,
		its.status,
		vd.vinno,
		vd.plateno,
		cc.commoditycategorydescription,
		m.makename,
		mo.modelname,
		va.VariantName,
		cyc.[count],
		enc.mesuretype,
		enc.enginecapacitynumber,
		vd.modelyear,
		vd.itempurchaseddate,
		mw.warrantymonths,
		mw.warrantykm,
		mo.noofdaystoriskstart,
		ph.policyenddate,
		ce.attributespecification,
		ph.premium,
		rec.contractno,
		cc.commoditycategorycode,
		ph.policyno,
		cust.firstname,
		cust.lastname,
		rec.contractno,
		c.startdate,
		c.enddate,
		ct.commoditytypedescription,
		curr.code,
		ph.policyno,
		city.cityname,
		con.countryname,
		ph.policystartdate,
		ph.policyenddate,
		cust.businessname,
		ph.comment,
		c.liabilitylimitation,
		ct.commoditycode,
		bwd.itempurchaseddate,
		oid.itempurchaseddate,
		ygd.itempurchaseddate,
		reccon.id,
		reccon.countryname,
		reccon.currencyid,
		reccurr.currencyname,
		ph.currencyperiodid,
		p.localcurrencyconversionrate,
		ph.transactiontypeid,
		ptt.code,
		ph.id,
		vd.dealerprice,
		bwd.dealerprice,
		oid.dealerprice,
		ygd.dealerprice,
		pboNett.code,
		p.Premium,
		pboGross.code,
		SalesUser.firstname,
		SalesUser.lastname,
		dlc.cityname,
		tpab.branchcode,
		con.countrycode,
		p.uniqueref,
		prt.code,
		ph.contractid,
		p.grosspremiumbeforetax,
		p.nrp,
		p.BookletNumber  ,
		bk.Name,
		p.MWStartDate,
		il.Months,
		il.TopOfMW,
		il.Km,
		vpa.Id,
		p.Co_Customer,
		custType.CustomerTypeName,
		cust.BusinessName,
		cust.BusinessTelNo,
		cust.BusinessAddress1,
		cust.BusinessAddress2,
		cust.BusinessAddress3,
		cust.BusinessAddress4,
		p.GrossPremiumBeforeTax,
		p.PolicySoldDate,
		vd.RegistrationDate,
		p.LocalCurrencyConversionRate,
		p.MWIsAvailable,
		p.HrsUsedAtPolicySale,
		mw.IsUnlimited,
		ic.Code,
		ceid.InvoiceNumber,
		ic.PlateNumber,
		apmd.MakeName,
		apmodeld.ModelName,
		ceid.AdditionalDetailsModelYear,
		ceid.AdditionalDetailsMileage,
		ic.TireQuantity,
		inctd.ArticleNumber	,
		atsp.Pattern,
		c.AnnualInterestRate,
		il.Months ,
		c.LiabilityLimitation,
		p.MonthlyEMI,
		b.Number,
		i.InsurerFullName,
		vd.GrossWeight,
		c.ClaimLimitation,
		p.TotalTax,
		vari.VariantName,
		ats.TirePrice,
		ceid.InvoiceCode,
		ats.OriginalTireDepth

		--inctd.SerialNumber
		) D
		Order By D.autoId

], System.Data.SqlClient.SqlException (0x80131904): Cannot find either column "dbo" or the user-defined function or aggregate "dbo.checkAvailableByPolicyIdAndPosition", or the name is ambiguous.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)
   at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer)
ClientConnectionId:26d3a6a1-d1d1-449e-b7e3-905b4ea0a2ac
Error Number:4121,State:1,Class:16
2021-06-09 15:04:46.4223 TAS.Services.Entities.Management.BordxEntityManager GetConfirmedBordxForExport: exception: could not execute query
[ 
SELECT Row_number()
  OVER(
    ORDER BY D.autoId) as SNo, * FROM (
SELECT DISTINCT
---------------------------------
b.EntryDateTime													AS		BDXExtractDate,
rec.uwyear                                                      AS		UnderWriterYear,
re.reinsurername                                                AS		ReinsurerName,
p.policyNo														AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode												AS		InvoiceCode,
ceid.InvoiceNumber												AS      InvoiceNumber, -- New Feild
i.insurershortname                                              AS		CedentName,
''																AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																AS		FirstName,
' '                                                             AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
                                                                AS		LastName,
''																AS		CoBuyer,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                AS		Address,
' '                                                             AS		POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                AS		Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
	CONVERT(VARCHAR, cust.mobileno + ' ')	
	END
														        AS		MobileNumber,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                AS		City,
con.CountryName													AS		Country,
p.EntryDateTime													AS		SystemTransactionDate,
p.UniqueRef														AS		SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  			AS		BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)										AS		BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS		DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																AS		Status,
''																AS		CoverType,
wt.WarrantyTypeDescription										AS		WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName												AS		Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber													AS		PlateNumber,
cc.CommodityCategoryDescription									AS		Category,
''																AS		Manufacture,
''																AS		Model,
''																AS		Variant,
cyc.[count]                                                     AS		CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END																AS		FourByFour,
''																AS		Hybrid,
''																AS		ElectricVehicle,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                          AS		EngineCapacity,
Convert(varchar(25),vd.GrossWeight) + ' T'                      AS		Gvw,
vd.modelyear                                                    AS		ModelYear,
p.PolicySoldDate                                                AS		PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                             
'-'																AS		VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                             
'-'																AS		VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                             AS		ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END															    AS		ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                             AS		MileageLimitationInKMs,
''																AS		ManfCoverHours,
dbo.checkAvailableByPolicyIdAndPosition('FL',p.id)				AS		FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id)				AS		FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id)				AS		RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id)				AS		RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id)				AS		SP,
m.makename                                                      AS		TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') AS	F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									 AS		NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F')		AS		F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F')AS		F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F')	AS		F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F')	AS		F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F')	AS		F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') AS	R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)									AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R')		AS		R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R')AS		R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R')	AS		R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R')	AS		R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R')	AS		R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																AS		DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                             AS		DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                  AS		ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'															 AS		ExtentionDurationInHours,
 'N/A'															 AS		HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
																AS		MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),
			p.MWStartDate)<= p.PolicySoldDate
			AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
																AS		CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)					AS		TotalLiability,
'1 per Tyre'													AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,


--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)       AS		MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)     AS		InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         
																AS			InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)AS			DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
--- Isnull((SELECT CASE
--								WHEN ccm.ispercentage = 1 THEN ccm.commission *
--										(CASE WHEN ccm.isonnrp = 1 THEN
--										p.NRP
--										ELSE
--										p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
--										END)
--										/ 100
--					ELSE ccm.commission
--					END
--						FROM   nrpcommissioncontractmapping ccm
--							INNER JOIN nrpcommissiontypes cot
--									ON cot.id = ccm.nrpcommissionid
--						WHERE  ccm.contractid = c.id
--					AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)
																	AS		GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            
																	AS		Brokerage,
p.NRP 							AS		NRP,
 p.LocalCurrencyConversionRate										AS		ConversionRate,
p.NRP																AS		USD_NRP,
ph.transactiontypeid                                                AS		TransactionTypeId,
ptt.code                                                            AS
TransactionTypeCode,
p.contractid                                                          AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

--inctd.SerialNumber												as SerialNumber
--citd.UnUsedTireDepth
FROM   policy p

       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = p.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = p.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = p.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = p.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = p.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
		LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN extensiontype e
              ON e.id = p.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = p.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = p.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = p.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = p.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetails vd
              ON vd.id = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetails bwd
              ON bwd.id = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
       LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetails ygd
              ON ygd.id = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
			ON va.id = ( CASE
                        WHEN ct.commoditycode = 'A' THEN vd.Variant
                        --WHEN ct.commoditycode = 'E' THEN bwd.modelid
                        WHEN ct.commoditycode = 'O' THEN oid.VariantId
                        --WHEN ct.commoditycode = 'Y' THEN ygd.modelid
						END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
		LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId

       LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId
		LEFT JOIN warrantytype wt
              ON wt.id = cep.WarrentyTypeId
       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
	   LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = p.salespersonid
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
		LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
		LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	    LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
		LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
		LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
		LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	   LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
GROUP  BY
			p.id,
			p.policyNo,
			c.id,
			p.EntryDateTime	,
			b.EntryDateTime,
			rec.uwyear,
			re.reinsurername,
			i.insurershortname,
			b.month,
			b.year,
			CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month)      ,
			c.dealname,
			dt.NAME,
			c.isactive,
			wt.warrantytypedescription,
			p.hrsusedatpolicysale,
			d.dealername,
			dl.location,
			cust.address1,
			cust.address2,
			cust.address3,
			city.cityname,
			city.zipcode,
			cust.mobileno,
			its.status,
			vd.vinno,
			vd.plateno,
			cc.commoditycategorydescription,
			m.makename,
			mo.modelname,
			va.VariantName,
			cyc.[count],
			enc.mesuretype,
			enc.enginecapacitynumber,
			vd.modelyear,
			vd.itempurchaseddate,
			mw.warrantymonths,
			mw.warrantykm,
			mo.noofdaystoriskstart,
			p.policyenddate,
			ce.attributespecification,
			p.premium,
			p.NRP,
			rec.contractno,
			cc.commoditycategorycode,
			p.policyno,
			cust.firstname,
			cust.lastname,
			rec.contractno,
			c.startdate,
			c.enddate,
			ct.commoditytypedescription,
			curr.code,
			p.policyno,
			city.cityname,
			con.countryname,
			p.policystartdate,
			p.policyenddate,
			cust.businessname,
			p.comment,
			c.liabilitylimitation,
			ct.commoditycode,
			bwd.itempurchaseddate,
			oid.itempurchaseddate,
			ygd.itempurchaseddate,
			reccon.id,
			reccon.countryname,
			reccon.currencyid,
			reccurr.currencyname,
			p.currencyperiodid,
			p.localcurrencyconversionrate,
			ph.transactiontypeid,
			ptt.code,
			vd.dealerprice,
			bwd.dealerprice,
			oid.dealerprice,
			ygd.dealerprice,
			pboNett.code,
			p.Premium,
			pboGross.code,
			SalesUser.firstname,
			SalesUser.lastname,
			dlc.cityname,
			tpab.branchcode,
			con.countrycode,
			p.uniqueref,
			prt.code,
			p.contractid,
			p.grosspremiumbeforetax,
			p.nrp,
			il.Months,
			il.Km,
			il.TopOfMW,
			vd.GrossWeight,
			p.BookletNumber,
			bk.Name,
			p.MWStartDate,
			p.TotalTax,
			vpa.Id,
			p.Co_Customer,
			custType.CustomerTypeName,
			cust.BusinessName,
			cust.BusinessTelNo,
			cust.BusinessAddress1,
			cust.BusinessAddress2,
			cust.BusinessAddress3,
			cust.BusinessAddress4,
			p.GrossPremiumBeforeTax,
			p.PolicySoldDate,
			vd.RegistrationDate,
			p.MWIsAvailable,
			p.LocalCurrencyConversionRate,
			p.MWIsAvailable,
			mw.IsUnlimited,
			ic.Code,
			ceid.InvoiceNumber,
			ic.PlateNumber,
			apmd.MakeName,
			apmodeld.ModelName,
			ceid.AdditionalDetailsModelYear,
			ceid.AdditionalDetailsMileage,
			ic.TireQuantity,
			inctd.ArticleNumber		,
			atsp.Pattern,
			c.AnnualInterestRate,
			il.Months ,
			c.LiabilityLimitation,
			p.MonthlyEMI,
			b.Number,
			i.InsurerFullName,
			vd.GrossWeight,
			c.ClaimLimitation,
			vari.VariantName,
			ats.TirePrice,
			ceid.InvoiceCode,
			ats.OriginalTireDepth

			--inctd.SerialNumber
UNION
SELECT DISTINCT
---------------------------------
b.EntryDateTime														  AS		BDXExtractDate,
rec.uwyear                                                            AS		UnderWriterYear,
re.reinsurername                                                      AS		ReinsurerName,
p.policyNo															  AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode													  AS		InvoiceCode,
ceid.InvoiceNumber													  AS      InvoiceNumber, -- New Feild
i.insurershortname                                                    AS		CedentName,
''																	  AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																	  AS		FirstName,
' '                                                                   AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
																	  AS LastName,
''																	  AS CoBuyer
,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                    AS Address
,
' '                                                               AS POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                    AS Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.mobileno + ' '
	END
														            AS MobileNumber,
	CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                    AS City,
	con.CountryName													AS Country,
-----------------------------------------------------
p.EntryDateTime AS SystemTransactionDate,
p.UniqueRef As
SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  													AS BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)											AS BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																	AS Status,
''																AS		CoverType,
wt.WarrantyTypeDescription											AS WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName													AS Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber														AS PlateNumber,
cc.CommodityCategoryDescription										AS Category,
''                                                          AS Manufacture,
''                                                         AS Model,
''                                                       as Variant,
cyc.[count]                                                           AS
CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END AS FourByFour,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                                AS
EngineCapacity,
''																AS Hybrid,
''																AS ElectricVehicle,
Convert(varchar(25),vd.GrossWeight) + ' T'                        AS
Gvw,
vd.modelyear                                                   AS ModelYear,
p.PolicySoldDate                                                      As  PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                                   
'-'	 AS VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                                   
'-'	AS VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                                   AS ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END																	  AS ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                                    AS MileageLimitationInKMs,
''																		AS ManfCoverHours,

dbo.checkAvailableByPolicyIdAndPosition('FL',p.id) as FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id) as FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id) as RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id) as RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id) as SP,
m.makename                                                          AS TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') as F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									AS NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F') as F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F') as F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F') as F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F') as F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F') as F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') as R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)						AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R') as R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R') as R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R') as R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R') as R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R') as R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																	  AS DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                                  AS DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                       AS ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'																		AS ExtentionDurationInHours,
 'N/A'																	AS HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
 AS
MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),p.MWStartDate)<= p.PolicySoldDate
	AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
 AS
CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE  CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)													AS		TotalLiability,
'1 per Tyre'																AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,
--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)            AS
MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)          AS
InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         AS
InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)         AS
DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
		AS GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            AS Brokerage,
p.NRP  AS NRP,
 p.LocalCurrencyConversionRate AS ConversionRate,
 p.NRP AS USD_NRP,
ph.transactiontypeid                                                  AS
TransactionTypeId,
'EndorsementOld'                                                      AS
TransactionTypeCode,
ph.contractid                                                         AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

FROM   policy p
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN warrantytype wt
              ON wt.id = ph.covertypeid
       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = ph.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = ph.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = ph.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = ph.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = ph.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
	    LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
       LEFT JOIN extensiontype e
              ON e.id = ph.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = ph.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = ph.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = ph.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = ph.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetailshistory vd
              ON vd.vehicledetailsid = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetailshistory bwd
              ON bwd.brownandwhitedetailsid = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
		LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN otheritemdetailshistory oidh
              ON oidh.otheritemdetailsid = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetailshistory ygd
              ON ygd.yellowgooddetailsid = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
		ON va.id = ( CASE
					WHEN ct.commoditycode = 'A' THEN vd.Variant
					--WHEN ct.commoditycode = 'E' THEN bwd.modelid
					WHEN ct.commoditycode = 'O' THEN oid.VariantId
					--WHEN ct.commoditycode = 'Y' THEN ygd.modelid
					END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
     	LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId
     LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId

       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
		 LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = ph.salespersonid
           LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
	   LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
	  LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	  LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
	  LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
	  LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
	  LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	  LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
       AND ptt.code = 'Endorsement'
GROUP  BY
		p.id,
		p.policyNo,
		c.id,
		p.EntryDateTime	,
		b.EntryDateTime,
		rec.uwyear,
		re.reinsurername,
		i.insurershortname,
		b.month,
		b.year,
		CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month) ,
		c.dealname,
		dt.NAME,
		c.isactive,
		wt.warrantytypedescription,
		ph.hrsusedatpolicysale,
		d.dealername,
		dl.location,
		cust.address1,
		cust.address2,
		cust.address3,
		city.cityname,
		city.zipcode,
		cust.mobileno,
		its.status,
		vd.vinno,
		vd.plateno,
		cc.commoditycategorydescription,
		m.makename,
		mo.modelname,
		va.VariantName,
		cyc.[count],
		enc.mesuretype,
		enc.enginecapacitynumber,
		vd.modelyear,
		vd.itempurchaseddate,
		mw.warrantymonths,
		mw.warrantykm,
		mo.noofdaystoriskstart,
		ph.policyenddate,
		ce.attributespecification,
		ph.premium,
		rec.contractno,
		cc.commoditycategorycode,
		ph.policyno,
		cust.firstname,
		cust.lastname,
		rec.contractno,
		c.startdate,
		c.enddate,
		ct.commoditytypedescription,
		curr.code,
		ph.policyno,
		city.cityname,
		con.countryname,
		ph.policystartdate,
		ph.policyenddate,
		cust.businessname,
		ph.comment,
		c.liabilitylimitation,
		ct.commoditycode,
		bwd.itempurchaseddate,
		oid.itempurchaseddate,
		ygd.itempurchaseddate,
		reccon.id,
		reccon.countryname,
		reccon.currencyid,
		reccurr.currencyname,
		ph.currencyperiodid,
		p.localcurrencyconversionrate,
		ph.transactiontypeid,
		ptt.code,
		ph.id,
		vd.dealerprice,
		bwd.dealerprice,
		oid.dealerprice,
		ygd.dealerprice,
		pboNett.code,
		p.Premium,
		pboGross.code,
		SalesUser.firstname,
		SalesUser.lastname,
		dlc.cityname,
		tpab.branchcode,
		con.countrycode,
		p.uniqueref,
		prt.code,
		ph.contractid,
		p.grosspremiumbeforetax,
		p.nrp,
		p.BookletNumber  ,
		bk.Name,
		p.MWStartDate,
		il.Months,
		il.TopOfMW,
		il.Km,
		vpa.Id,
		p.Co_Customer,
		custType.CustomerTypeName,
		cust.BusinessName,
		cust.BusinessTelNo,
		cust.BusinessAddress1,
		cust.BusinessAddress2,
		cust.BusinessAddress3,
		cust.BusinessAddress4,
		p.GrossPremiumBeforeTax,
		p.PolicySoldDate,
		vd.RegistrationDate,
		p.LocalCurrencyConversionRate,
		p.MWIsAvailable,
		p.HrsUsedAtPolicySale,
		mw.IsUnlimited,
		ic.Code,
		ceid.InvoiceNumber,
		ic.PlateNumber,
		apmd.MakeName,
		apmodeld.ModelName,
		ceid.AdditionalDetailsModelYear,
		ceid.AdditionalDetailsMileage,
		ic.TireQuantity,
		inctd.ArticleNumber	,
		atsp.Pattern,
		c.AnnualInterestRate,
		il.Months ,
		c.LiabilityLimitation,
		p.MonthlyEMI,
		b.Number,
		i.InsurerFullName,
		vd.GrossWeight,
		c.ClaimLimitation,
		p.TotalTax,
		vari.VariantName,
		ats.TirePrice,
		ceid.InvoiceCode,
		ats.OriginalTireDepth

		--inctd.SerialNumber
		) D
		Order By D.autoId

 ]
[SQL: 
SELECT Row_number()
  OVER(
    ORDER BY D.autoId) as SNo, * FROM (
SELECT DISTINCT
---------------------------------
b.EntryDateTime													AS		BDXExtractDate,
rec.uwyear                                                      AS		UnderWriterYear,
re.reinsurername                                                AS		ReinsurerName,
p.policyNo														AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode												AS		InvoiceCode,
ceid.InvoiceNumber												AS      InvoiceNumber, -- New Feild
i.insurershortname                                              AS		CedentName,
''																AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																AS		FirstName,
' '                                                             AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
                                                                AS		LastName,
''																AS		CoBuyer,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                AS		Address,
' '                                                             AS		POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                AS		Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
	CONVERT(VARCHAR, cust.mobileno + ' ')	
	END
														        AS		MobileNumber,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                AS		City,
con.CountryName													AS		Country,
p.EntryDateTime													AS		SystemTransactionDate,
p.UniqueRef														AS		SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  			AS		BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)										AS		BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS		DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																AS		Status,
''																AS		CoverType,
wt.WarrantyTypeDescription										AS		WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName												AS		Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber													AS		PlateNumber,
cc.CommodityCategoryDescription									AS		Category,
''																AS		Manufacture,
''																AS		Model,
''																AS		Variant,
cyc.[count]                                                     AS		CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END																AS		FourByFour,
''																AS		Hybrid,
''																AS		ElectricVehicle,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                          AS		EngineCapacity,
Convert(varchar(25),vd.GrossWeight) + ' T'                      AS		Gvw,
vd.modelyear                                                    AS		ModelYear,
p.PolicySoldDate                                                AS		PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                             
'-'																AS		VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                             
'-'																AS		VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                             AS		ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END															    AS		ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                             AS		MileageLimitationInKMs,
''																AS		ManfCoverHours,
dbo.checkAvailableByPolicyIdAndPosition('FL',p.id)				AS		FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id)				AS		FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id)				AS		RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id)				AS		RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id)				AS		SP,
m.makename                                                      AS		TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') AS	F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									 AS		NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F')		AS		F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F')AS		F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F')	AS		F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F')	AS		F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F')	AS		F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') AS	R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)									AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R')		AS		R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R')AS		R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R')	AS		R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R')	AS		R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R')	AS		R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																AS		DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                             AS		DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                  AS		ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'															 AS		ExtentionDurationInHours,
 'N/A'															 AS		HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
																AS		MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),
			p.MWStartDate)<= p.PolicySoldDate
			AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
																AS		CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)					AS		TotalLiability,
'1 per Tyre'													AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,


--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)       AS		MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)     AS		InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         
																AS			InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)AS			DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
--- Isnull((SELECT CASE
--								WHEN ccm.ispercentage = 1 THEN ccm.commission *
--										(CASE WHEN ccm.isonnrp = 1 THEN
--										p.NRP
--										ELSE
--										p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
--										END)
--										/ 100
--					ELSE ccm.commission
--					END
--						FROM   nrpcommissioncontractmapping ccm
--							INNER JOIN nrpcommissiontypes cot
--									ON cot.id = ccm.nrpcommissionid
--						WHERE  ccm.contractid = c.id
--					AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)
																	AS		GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            
																	AS		Brokerage,
p.NRP 							AS		NRP,
 p.LocalCurrencyConversionRate										AS		ConversionRate,
p.NRP																AS		USD_NRP,
ph.transactiontypeid                                                AS		TransactionTypeId,
ptt.code                                                            AS
TransactionTypeCode,
p.contractid                                                          AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

--inctd.SerialNumber												as SerialNumber
--citd.UnUsedTireDepth
FROM   policy p

       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = p.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = p.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = p.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = p.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = p.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
		LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN extensiontype e
              ON e.id = p.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = p.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = p.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = p.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = p.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetails vd
              ON vd.id = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetails bwd
              ON bwd.id = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
       LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetails ygd
              ON ygd.id = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
			ON va.id = ( CASE
                        WHEN ct.commoditycode = 'A' THEN vd.Variant
                        --WHEN ct.commoditycode = 'E' THEN bwd.modelid
                        WHEN ct.commoditycode = 'O' THEN oid.VariantId
                        --WHEN ct.commoditycode = 'Y' THEN ygd.modelid
						END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
		LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId

       LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId
		LEFT JOIN warrantytype wt
              ON wt.id = cep.WarrentyTypeId
       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
	   LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = p.salespersonid
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
		LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
		LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	    LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
		LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
		LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
		LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	   LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
GROUP  BY
			p.id,
			p.policyNo,
			c.id,
			p.EntryDateTime	,
			b.EntryDateTime,
			rec.uwyear,
			re.reinsurername,
			i.insurershortname,
			b.month,
			b.year,
			CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month)      ,
			c.dealname,
			dt.NAME,
			c.isactive,
			wt.warrantytypedescription,
			p.hrsusedatpolicysale,
			d.dealername,
			dl.location,
			cust.address1,
			cust.address2,
			cust.address3,
			city.cityname,
			city.zipcode,
			cust.mobileno,
			its.status,
			vd.vinno,
			vd.plateno,
			cc.commoditycategorydescription,
			m.makename,
			mo.modelname,
			va.VariantName,
			cyc.[count],
			enc.mesuretype,
			enc.enginecapacitynumber,
			vd.modelyear,
			vd.itempurchaseddate,
			mw.warrantymonths,
			mw.warrantykm,
			mo.noofdaystoriskstart,
			p.policyenddate,
			ce.attributespecification,
			p.premium,
			p.NRP,
			rec.contractno,
			cc.commoditycategorycode,
			p.policyno,
			cust.firstname,
			cust.lastname,
			rec.contractno,
			c.startdate,
			c.enddate,
			ct.commoditytypedescription,
			curr.code,
			p.policyno,
			city.cityname,
			con.countryname,
			p.policystartdate,
			p.policyenddate,
			cust.businessname,
			p.comment,
			c.liabilitylimitation,
			ct.commoditycode,
			bwd.itempurchaseddate,
			oid.itempurchaseddate,
			ygd.itempurchaseddate,
			reccon.id,
			reccon.countryname,
			reccon.currencyid,
			reccurr.currencyname,
			p.currencyperiodid,
			p.localcurrencyconversionrate,
			ph.transactiontypeid,
			ptt.code,
			vd.dealerprice,
			bwd.dealerprice,
			oid.dealerprice,
			ygd.dealerprice,
			pboNett.code,
			p.Premium,
			pboGross.code,
			SalesUser.firstname,
			SalesUser.lastname,
			dlc.cityname,
			tpab.branchcode,
			con.countrycode,
			p.uniqueref,
			prt.code,
			p.contractid,
			p.grosspremiumbeforetax,
			p.nrp,
			il.Months,
			il.Km,
			il.TopOfMW,
			vd.GrossWeight,
			p.BookletNumber,
			bk.Name,
			p.MWStartDate,
			p.TotalTax,
			vpa.Id,
			p.Co_Customer,
			custType.CustomerTypeName,
			cust.BusinessName,
			cust.BusinessTelNo,
			cust.BusinessAddress1,
			cust.BusinessAddress2,
			cust.BusinessAddress3,
			cust.BusinessAddress4,
			p.GrossPremiumBeforeTax,
			p.PolicySoldDate,
			vd.RegistrationDate,
			p.MWIsAvailable,
			p.LocalCurrencyConversionRate,
			p.MWIsAvailable,
			mw.IsUnlimited,
			ic.Code,
			ceid.InvoiceNumber,
			ic.PlateNumber,
			apmd.MakeName,
			apmodeld.ModelName,
			ceid.AdditionalDetailsModelYear,
			ceid.AdditionalDetailsMileage,
			ic.TireQuantity,
			inctd.ArticleNumber		,
			atsp.Pattern,
			c.AnnualInterestRate,
			il.Months ,
			c.LiabilityLimitation,
			p.MonthlyEMI,
			b.Number,
			i.InsurerFullName,
			vd.GrossWeight,
			c.ClaimLimitation,
			vari.VariantName,
			ats.TirePrice,
			ceid.InvoiceCode,
			ats.OriginalTireDepth

			--inctd.SerialNumber
UNION
SELECT DISTINCT
---------------------------------
b.EntryDateTime														  AS		BDXExtractDate,
rec.uwyear                                                            AS		UnderWriterYear,
re.reinsurername                                                      AS		ReinsurerName,
p.policyNo															  AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode													  AS		InvoiceCode,
ceid.InvoiceNumber													  AS      InvoiceNumber, -- New Feild
i.insurershortname                                                    AS		CedentName,
''																	  AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																	  AS		FirstName,
' '                                                                   AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
																	  AS LastName,
''																	  AS CoBuyer
,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                    AS Address
,
' '                                                               AS POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                    AS Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.mobileno + ' '
	END
														            AS MobileNumber,
	CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                    AS City,
	con.CountryName													AS Country,
-----------------------------------------------------
p.EntryDateTime AS SystemTransactionDate,
p.UniqueRef As
SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  													AS BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)											AS BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																	AS Status,
''																AS		CoverType,
wt.WarrantyTypeDescription											AS WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName													AS Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber														AS PlateNumber,
cc.CommodityCategoryDescription										AS Category,
''                                                          AS Manufacture,
''                                                         AS Model,
''                                                       as Variant,
cyc.[count]                                                           AS
CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END AS FourByFour,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                                AS
EngineCapacity,
''																AS Hybrid,
''																AS ElectricVehicle,
Convert(varchar(25),vd.GrossWeight) + ' T'                        AS
Gvw,
vd.modelyear                                                   AS ModelYear,
p.PolicySoldDate                                                      As  PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                                   
'-'	 AS VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                                   
'-'	AS VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                                   AS ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END																	  AS ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                                    AS MileageLimitationInKMs,
''																		AS ManfCoverHours,

dbo.checkAvailableByPolicyIdAndPosition('FL',p.id) as FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id) as FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id) as RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id) as RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id) as SP,
m.makename                                                          AS TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') as F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									AS NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F') as F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F') as F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F') as F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F') as F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F') as F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') as R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)						AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R') as R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R') as R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R') as R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R') as R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R') as R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																	  AS DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                                  AS DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                       AS ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'																		AS ExtentionDurationInHours,
 'N/A'																	AS HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
 AS
MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),p.MWStartDate)<= p.PolicySoldDate
	AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
 AS
CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE  CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)													AS		TotalLiability,
'1 per Tyre'																AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,
--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)            AS
MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)          AS
InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         AS
InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)         AS
DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
		AS GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            AS Brokerage,
p.NRP  AS NRP,
 p.LocalCurrencyConversionRate AS ConversionRate,
 p.NRP AS USD_NRP,
ph.transactiontypeid                                                  AS
TransactionTypeId,
'EndorsementOld'                                                      AS
TransactionTypeCode,
ph.contractid                                                         AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

FROM   policy p
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN warrantytype wt
              ON wt.id = ph.covertypeid
       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = ph.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = ph.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = ph.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = ph.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = ph.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
	    LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
       LEFT JOIN extensiontype e
              ON e.id = ph.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = ph.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = ph.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = ph.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = ph.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetailshistory vd
              ON vd.vehicledetailsid = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetailshistory bwd
              ON bwd.brownandwhitedetailsid = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
		LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN otheritemdetailshistory oidh
              ON oidh.otheritemdetailsid = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetailshistory ygd
              ON ygd.yellowgooddetailsid = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
		ON va.id = ( CASE
					WHEN ct.commoditycode = 'A' THEN vd.Variant
					--WHEN ct.commoditycode = 'E' THEN bwd.modelid
					WHEN ct.commoditycode = 'O' THEN oid.VariantId
					--WHEN ct.commoditycode = 'Y' THEN ygd.modelid
					END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
     	LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId
     LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId

       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
		 LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = ph.salespersonid
           LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
	   LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
	  LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	  LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
	  LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
	  LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
	  LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	  LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
       AND ptt.code = 'Endorsement'
GROUP  BY
		p.id,
		p.policyNo,
		c.id,
		p.EntryDateTime	,
		b.EntryDateTime,
		rec.uwyear,
		re.reinsurername,
		i.insurershortname,
		b.month,
		b.year,
		CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month) ,
		c.dealname,
		dt.NAME,
		c.isactive,
		wt.warrantytypedescription,
		ph.hrsusedatpolicysale,
		d.dealername,
		dl.location,
		cust.address1,
		cust.address2,
		cust.address3,
		city.cityname,
		city.zipcode,
		cust.mobileno,
		its.status,
		vd.vinno,
		vd.plateno,
		cc.commoditycategorydescription,
		m.makename,
		mo.modelname,
		va.VariantName,
		cyc.[count],
		enc.mesuretype,
		enc.enginecapacitynumber,
		vd.modelyear,
		vd.itempurchaseddate,
		mw.warrantymonths,
		mw.warrantykm,
		mo.noofdaystoriskstart,
		ph.policyenddate,
		ce.attributespecification,
		ph.premium,
		rec.contractno,
		cc.commoditycategorycode,
		ph.policyno,
		cust.firstname,
		cust.lastname,
		rec.contractno,
		c.startdate,
		c.enddate,
		ct.commoditytypedescription,
		curr.code,
		ph.policyno,
		city.cityname,
		con.countryname,
		ph.policystartdate,
		ph.policyenddate,
		cust.businessname,
		ph.comment,
		c.liabilitylimitation,
		ct.commoditycode,
		bwd.itempurchaseddate,
		oid.itempurchaseddate,
		ygd.itempurchaseddate,
		reccon.id,
		reccon.countryname,
		reccon.currencyid,
		reccurr.currencyname,
		ph.currencyperiodid,
		p.localcurrencyconversionrate,
		ph.transactiontypeid,
		ptt.code,
		ph.id,
		vd.dealerprice,
		bwd.dealerprice,
		oid.dealerprice,
		ygd.dealerprice,
		pboNett.code,
		p.Premium,
		pboGross.code,
		SalesUser.firstname,
		SalesUser.lastname,
		dlc.cityname,
		tpab.branchcode,
		con.countrycode,
		p.uniqueref,
		prt.code,
		ph.contractid,
		p.grosspremiumbeforetax,
		p.nrp,
		p.BookletNumber  ,
		bk.Name,
		p.MWStartDate,
		il.Months,
		il.TopOfMW,
		il.Km,
		vpa.Id,
		p.Co_Customer,
		custType.CustomerTypeName,
		cust.BusinessName,
		cust.BusinessTelNo,
		cust.BusinessAddress1,
		cust.BusinessAddress2,
		cust.BusinessAddress3,
		cust.BusinessAddress4,
		p.GrossPremiumBeforeTax,
		p.PolicySoldDate,
		vd.RegistrationDate,
		p.LocalCurrencyConversionRate,
		p.MWIsAvailable,
		p.HrsUsedAtPolicySale,
		mw.IsUnlimited,
		ic.Code,
		ceid.InvoiceNumber,
		ic.PlateNumber,
		apmd.MakeName,
		apmodeld.ModelName,
		ceid.AdditionalDetailsModelYear,
		ceid.AdditionalDetailsMileage,
		ic.TireQuantity,
		inctd.ArticleNumber	,
		atsp.Pattern,
		c.AnnualInterestRate,
		il.Months ,
		c.LiabilityLimitation,
		p.MonthlyEMI,
		b.Number,
		i.InsurerFullName,
		vd.GrossWeight,
		c.ClaimLimitation,
		p.TotalTax,
		vari.VariantName,
		ats.TirePrice,
		ceid.InvoiceCode,
		ats.OriginalTireDepth

		--inctd.SerialNumber
		) D
		Order By D.autoId

], System.Data.SqlClient.SqlException (0x80131904): Cannot find either column "dbo" or the user-defined function or aggregate "dbo.checkAvailableByPolicyIdAndPosition", or the name is ambiguous.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)
   at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer)
ClientConnectionId:0ec7c4a3-7168-47fc-b9f4-d3e340a35e9b
Error Number:4121,State:1,Class:16
2021-06-09 15:06:07.0050 TAS.Services.Entities.Management.BordxEntityManager GetConfirmedBordxForExport: exception: could not execute query
[ 
SELECT Row_number()
  OVER(
    ORDER BY D.autoId) as SNo, * FROM (
SELECT DISTINCT
---------------------------------
b.EntryDateTime													AS		BDXExtractDate,
rec.uwyear                                                      AS		UnderWriterYear,
re.reinsurername                                                AS		ReinsurerName,
p.policyNo														AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode												AS		InvoiceCode,
ceid.InvoiceNumber												AS      InvoiceNumber, -- New Feild
i.insurershortname                                              AS		CedentName,
''																AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																AS		FirstName,
' '                                                             AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
                                                                AS		LastName,
''																AS		CoBuyer,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                AS		Address,
' '                                                             AS		POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                AS		Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
	CONVERT(VARCHAR, cust.mobileno + ' ')	
	END
														        AS		MobileNumber,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                AS		City,
con.CountryName													AS		Country,
p.EntryDateTime													AS		SystemTransactionDate,
p.UniqueRef														AS		SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  			AS		BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)										AS		BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS		DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																AS		Status,
''																AS		CoverType,
wt.WarrantyTypeDescription										AS		WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName												AS		Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber													AS		PlateNumber,
cc.CommodityCategoryDescription									AS		Category,
''																AS		Manufacture,
''																AS		Model,
''																AS		Variant,
cyc.[count]                                                     AS		CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END																AS		FourByFour,
''																AS		Hybrid,
''																AS		ElectricVehicle,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                          AS		EngineCapacity,
Convert(varchar(25),vd.GrossWeight) + ' T'                      AS		Gvw,
vd.modelyear                                                    AS		ModelYear,
p.PolicySoldDate                                                AS		PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                             
'-'																AS		VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                             
'-'																AS		VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                             AS		ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END															    AS		ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                             AS		MileageLimitationInKMs,
''																AS		ManfCoverHours,
dbo.checkAvailableByPolicyIdAndPosition('FL',p.id)				AS		FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id)				AS		FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id)				AS		RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id)				AS		RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id)				AS		SP,
m.makename                                                      AS		TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') AS	F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									 AS		NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F')		AS		F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F')AS		F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F')	AS		F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F')	AS		F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F')	AS		F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') AS	R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)									AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R')		AS		R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R')AS		R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R')	AS		R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R')	AS		R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R')	AS		R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																AS		DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                             AS		DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                  AS		ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'															 AS		ExtentionDurationInHours,
 'N/A'															 AS		HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
																AS		MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),
			p.MWStartDate)<= p.PolicySoldDate
			AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
																AS		CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)					AS		TotalLiability,
'1 per Tyre'													AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,


--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)       AS		MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)     AS		InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         
																AS			InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)AS			DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
--- Isnull((SELECT CASE
--								WHEN ccm.ispercentage = 1 THEN ccm.commission *
--										(CASE WHEN ccm.isonnrp = 1 THEN
--										p.NRP
--										ELSE
--										p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
--										END)
--										/ 100
--					ELSE ccm.commission
--					END
--						FROM   nrpcommissioncontractmapping ccm
--							INNER JOIN nrpcommissiontypes cot
--									ON cot.id = ccm.nrpcommissionid
--						WHERE  ccm.contractid = c.id
--					AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)
																	AS		GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            
																	AS		Brokerage,
p.NRP 							AS		NRP,
 p.LocalCurrencyConversionRate										AS		ConversionRate,
p.NRP																AS		USD_NRP,
ph.transactiontypeid                                                AS		TransactionTypeId,
ptt.code                                                            AS
TransactionTypeCode,
p.contractid                                                          AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

--inctd.SerialNumber												as SerialNumber
--citd.UnUsedTireDepth
FROM   policy p

       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = p.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = p.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = p.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = p.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = p.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
		LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN extensiontype e
              ON e.id = p.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = p.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = p.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = p.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = p.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetails vd
              ON vd.id = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetails bwd
              ON bwd.id = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
       LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetails ygd
              ON ygd.id = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
			ON va.id = ( CASE
                        WHEN ct.commoditycode = 'A' THEN vd.Variant
                        --WHEN ct.commoditycode = 'E' THEN bwd.modelid
                        WHEN ct.commoditycode = 'O' THEN oid.VariantId
                        --WHEN ct.commoditycode = 'Y' THEN ygd.modelid
						END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
		LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId

       LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId
		LEFT JOIN warrantytype wt
              ON wt.id = cep.WarrentyTypeId
       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
	   LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = p.salespersonid
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
		LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
		LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	    LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
		LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
		LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
		LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	   LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
GROUP  BY
			p.id,
			p.policyNo,
			c.id,
			p.EntryDateTime	,
			b.EntryDateTime,
			rec.uwyear,
			re.reinsurername,
			i.insurershortname,
			b.month,
			b.year,
			CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month)      ,
			c.dealname,
			dt.NAME,
			c.isactive,
			wt.warrantytypedescription,
			p.hrsusedatpolicysale,
			d.dealername,
			dl.location,
			cust.address1,
			cust.address2,
			cust.address3,
			city.cityname,
			city.zipcode,
			cust.mobileno,
			its.status,
			vd.vinno,
			vd.plateno,
			cc.commoditycategorydescription,
			m.makename,
			mo.modelname,
			va.VariantName,
			cyc.[count],
			enc.mesuretype,
			enc.enginecapacitynumber,
			vd.modelyear,
			vd.itempurchaseddate,
			mw.warrantymonths,
			mw.warrantykm,
			mo.noofdaystoriskstart,
			p.policyenddate,
			ce.attributespecification,
			p.premium,
			p.NRP,
			rec.contractno,
			cc.commoditycategorycode,
			p.policyno,
			cust.firstname,
			cust.lastname,
			rec.contractno,
			c.startdate,
			c.enddate,
			ct.commoditytypedescription,
			curr.code,
			p.policyno,
			city.cityname,
			con.countryname,
			p.policystartdate,
			p.policyenddate,
			cust.businessname,
			p.comment,
			c.liabilitylimitation,
			ct.commoditycode,
			bwd.itempurchaseddate,
			oid.itempurchaseddate,
			ygd.itempurchaseddate,
			reccon.id,
			reccon.countryname,
			reccon.currencyid,
			reccurr.currencyname,
			p.currencyperiodid,
			p.localcurrencyconversionrate,
			ph.transactiontypeid,
			ptt.code,
			vd.dealerprice,
			bwd.dealerprice,
			oid.dealerprice,
			ygd.dealerprice,
			pboNett.code,
			p.Premium,
			pboGross.code,
			SalesUser.firstname,
			SalesUser.lastname,
			dlc.cityname,
			tpab.branchcode,
			con.countrycode,
			p.uniqueref,
			prt.code,
			p.contractid,
			p.grosspremiumbeforetax,
			p.nrp,
			il.Months,
			il.Km,
			il.TopOfMW,
			vd.GrossWeight,
			p.BookletNumber,
			bk.Name,
			p.MWStartDate,
			p.TotalTax,
			vpa.Id,
			p.Co_Customer,
			custType.CustomerTypeName,
			cust.BusinessName,
			cust.BusinessTelNo,
			cust.BusinessAddress1,
			cust.BusinessAddress2,
			cust.BusinessAddress3,
			cust.BusinessAddress4,
			p.GrossPremiumBeforeTax,
			p.PolicySoldDate,
			vd.RegistrationDate,
			p.MWIsAvailable,
			p.LocalCurrencyConversionRate,
			p.MWIsAvailable,
			mw.IsUnlimited,
			ic.Code,
			ceid.InvoiceNumber,
			ic.PlateNumber,
			apmd.MakeName,
			apmodeld.ModelName,
			ceid.AdditionalDetailsModelYear,
			ceid.AdditionalDetailsMileage,
			ic.TireQuantity,
			inctd.ArticleNumber		,
			atsp.Pattern,
			c.AnnualInterestRate,
			il.Months ,
			c.LiabilityLimitation,
			p.MonthlyEMI,
			b.Number,
			i.InsurerFullName,
			vd.GrossWeight,
			c.ClaimLimitation,
			vari.VariantName,
			ats.TirePrice,
			ceid.InvoiceCode,
			ats.OriginalTireDepth

			--inctd.SerialNumber
UNION
SELECT DISTINCT
---------------------------------
b.EntryDateTime														  AS		BDXExtractDate,
rec.uwyear                                                            AS		UnderWriterYear,
re.reinsurername                                                      AS		ReinsurerName,
p.policyNo															  AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode													  AS		InvoiceCode,
ceid.InvoiceNumber													  AS      InvoiceNumber, -- New Feild
i.insurershortname                                                    AS		CedentName,
''																	  AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																	  AS		FirstName,
' '                                                                   AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
																	  AS LastName,
''																	  AS CoBuyer
,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                    AS Address
,
' '                                                               AS POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                    AS Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.mobileno + ' '
	END
														            AS MobileNumber,
	CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                    AS City,
	con.CountryName													AS Country,
-----------------------------------------------------
p.EntryDateTime AS SystemTransactionDate,
p.UniqueRef As
SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  													AS BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)											AS BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																	AS Status,
''																AS		CoverType,
wt.WarrantyTypeDescription											AS WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName													AS Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber														AS PlateNumber,
cc.CommodityCategoryDescription										AS Category,
''                                                          AS Manufacture,
''                                                         AS Model,
''                                                       as Variant,
cyc.[count]                                                           AS
CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END AS FourByFour,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                                AS
EngineCapacity,
''																AS Hybrid,
''																AS ElectricVehicle,
Convert(varchar(25),vd.GrossWeight) + ' T'                        AS
Gvw,
vd.modelyear                                                   AS ModelYear,
p.PolicySoldDate                                                      As  PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                                   
'-'	 AS VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                                   
'-'	AS VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                                   AS ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END																	  AS ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                                    AS MileageLimitationInKMs,
''																		AS ManfCoverHours,

dbo.checkAvailableByPolicyIdAndPosition('FL',p.id) as FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id) as FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id) as RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id) as RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id) as SP,
m.makename                                                          AS TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') as F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									AS NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F') as F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F') as F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F') as F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F') as F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F') as F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') as R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)						AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R') as R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R') as R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R') as R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R') as R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R') as R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																	  AS DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                                  AS DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                       AS ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'																		AS ExtentionDurationInHours,
 'N/A'																	AS HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
 AS
MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),p.MWStartDate)<= p.PolicySoldDate
	AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
 AS
CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE  CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)													AS		TotalLiability,
'1 per Tyre'																AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,
--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)            AS
MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)          AS
InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         AS
InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)         AS
DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
		AS GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            AS Brokerage,
p.NRP  AS NRP,
 p.LocalCurrencyConversionRate AS ConversionRate,
 p.NRP AS USD_NRP,
ph.transactiontypeid                                                  AS
TransactionTypeId,
'EndorsementOld'                                                      AS
TransactionTypeCode,
ph.contractid                                                         AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

FROM   policy p
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN warrantytype wt
              ON wt.id = ph.covertypeid
       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = ph.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = ph.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = ph.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = ph.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = ph.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
	    LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
       LEFT JOIN extensiontype e
              ON e.id = ph.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = ph.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = ph.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = ph.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = ph.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetailshistory vd
              ON vd.vehicledetailsid = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetailshistory bwd
              ON bwd.brownandwhitedetailsid = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
		LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN otheritemdetailshistory oidh
              ON oidh.otheritemdetailsid = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetailshistory ygd
              ON ygd.yellowgooddetailsid = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
		ON va.id = ( CASE
					WHEN ct.commoditycode = 'A' THEN vd.Variant
					--WHEN ct.commoditycode = 'E' THEN bwd.modelid
					WHEN ct.commoditycode = 'O' THEN oid.VariantId
					--WHEN ct.commoditycode = 'Y' THEN ygd.modelid
					END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
     	LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId
     LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId

       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
		 LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = ph.salespersonid
           LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
	   LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
	  LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	  LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
	  LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
	  LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
	  LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	  LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
       AND ptt.code = 'Endorsement'
GROUP  BY
		p.id,
		p.policyNo,
		c.id,
		p.EntryDateTime	,
		b.EntryDateTime,
		rec.uwyear,
		re.reinsurername,
		i.insurershortname,
		b.month,
		b.year,
		CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month) ,
		c.dealname,
		dt.NAME,
		c.isactive,
		wt.warrantytypedescription,
		ph.hrsusedatpolicysale,
		d.dealername,
		dl.location,
		cust.address1,
		cust.address2,
		cust.address3,
		city.cityname,
		city.zipcode,
		cust.mobileno,
		its.status,
		vd.vinno,
		vd.plateno,
		cc.commoditycategorydescription,
		m.makename,
		mo.modelname,
		va.VariantName,
		cyc.[count],
		enc.mesuretype,
		enc.enginecapacitynumber,
		vd.modelyear,
		vd.itempurchaseddate,
		mw.warrantymonths,
		mw.warrantykm,
		mo.noofdaystoriskstart,
		ph.policyenddate,
		ce.attributespecification,
		ph.premium,
		rec.contractno,
		cc.commoditycategorycode,
		ph.policyno,
		cust.firstname,
		cust.lastname,
		rec.contractno,
		c.startdate,
		c.enddate,
		ct.commoditytypedescription,
		curr.code,
		ph.policyno,
		city.cityname,
		con.countryname,
		ph.policystartdate,
		ph.policyenddate,
		cust.businessname,
		ph.comment,
		c.liabilitylimitation,
		ct.commoditycode,
		bwd.itempurchaseddate,
		oid.itempurchaseddate,
		ygd.itempurchaseddate,
		reccon.id,
		reccon.countryname,
		reccon.currencyid,
		reccurr.currencyname,
		ph.currencyperiodid,
		p.localcurrencyconversionrate,
		ph.transactiontypeid,
		ptt.code,
		ph.id,
		vd.dealerprice,
		bwd.dealerprice,
		oid.dealerprice,
		ygd.dealerprice,
		pboNett.code,
		p.Premium,
		pboGross.code,
		SalesUser.firstname,
		SalesUser.lastname,
		dlc.cityname,
		tpab.branchcode,
		con.countrycode,
		p.uniqueref,
		prt.code,
		ph.contractid,
		p.grosspremiumbeforetax,
		p.nrp,
		p.BookletNumber  ,
		bk.Name,
		p.MWStartDate,
		il.Months,
		il.TopOfMW,
		il.Km,
		vpa.Id,
		p.Co_Customer,
		custType.CustomerTypeName,
		cust.BusinessName,
		cust.BusinessTelNo,
		cust.BusinessAddress1,
		cust.BusinessAddress2,
		cust.BusinessAddress3,
		cust.BusinessAddress4,
		p.GrossPremiumBeforeTax,
		p.PolicySoldDate,
		vd.RegistrationDate,
		p.LocalCurrencyConversionRate,
		p.MWIsAvailable,
		p.HrsUsedAtPolicySale,
		mw.IsUnlimited,
		ic.Code,
		ceid.InvoiceNumber,
		ic.PlateNumber,
		apmd.MakeName,
		apmodeld.ModelName,
		ceid.AdditionalDetailsModelYear,
		ceid.AdditionalDetailsMileage,
		ic.TireQuantity,
		inctd.ArticleNumber	,
		atsp.Pattern,
		c.AnnualInterestRate,
		il.Months ,
		c.LiabilityLimitation,
		p.MonthlyEMI,
		b.Number,
		i.InsurerFullName,
		vd.GrossWeight,
		c.ClaimLimitation,
		p.TotalTax,
		vari.VariantName,
		ats.TirePrice,
		ceid.InvoiceCode,
		ats.OriginalTireDepth

		--inctd.SerialNumber
		) D
		Order By D.autoId

 ]
[SQL: 
SELECT Row_number()
  OVER(
    ORDER BY D.autoId) as SNo, * FROM (
SELECT DISTINCT
---------------------------------
b.EntryDateTime													AS		BDXExtractDate,
rec.uwyear                                                      AS		UnderWriterYear,
re.reinsurername                                                AS		ReinsurerName,
p.policyNo														AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode												AS		InvoiceCode,
ceid.InvoiceNumber												AS      InvoiceNumber, -- New Feild
i.insurershortname                                              AS		CedentName,
''																AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																AS		FirstName,
' '                                                             AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
                                                                AS		LastName,
''																AS		CoBuyer,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                AS		Address,
' '                                                             AS		POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                AS		Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
	CONVERT(VARCHAR, cust.mobileno + ' ')	
	END
														        AS		MobileNumber,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                AS		City,
con.CountryName													AS		Country,
p.EntryDateTime													AS		SystemTransactionDate,
p.UniqueRef														AS		SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  			AS		BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)										AS		BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS		DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																AS		Status,
''																AS		CoverType,
wt.WarrantyTypeDescription										AS		WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName												AS		Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber													AS		PlateNumber,
cc.CommodityCategoryDescription									AS		Category,
''																AS		Manufacture,
''																AS		Model,
''																AS		Variant,
cyc.[count]                                                     AS		CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END																AS		FourByFour,
''																AS		Hybrid,
''																AS		ElectricVehicle,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                          AS		EngineCapacity,
Convert(varchar(25),vd.GrossWeight) + ' T'                      AS		Gvw,
vd.modelyear                                                    AS		ModelYear,
p.PolicySoldDate                                                AS		PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                             
'-'																AS		VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                             
'-'																AS		VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                             AS		ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END															    AS		ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                             AS		MileageLimitationInKMs,
''																AS		ManfCoverHours,
dbo.checkAvailableByPolicyIdAndPosition('FL',p.id)				AS		FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id)				AS		FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id)				AS		RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id)				AS		RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id)				AS		SP,
m.makename                                                      AS		TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') AS	F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									 AS		NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F')		AS		F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F')AS		F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F')	AS		F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F')	AS		F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F')	AS		F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') AS	R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)									AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R')		AS		R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R')AS		R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R')	AS		R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R')	AS		R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R')	AS		R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																AS		DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                             AS		DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                  AS		ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'															 AS		ExtentionDurationInHours,
 'N/A'															 AS		HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
																AS		MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),
			p.MWStartDate)<= p.PolicySoldDate
			AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
																AS		CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)					AS		TotalLiability,
'1 per Tyre'													AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,


--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)       AS		MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)     AS		InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         
																AS			InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)AS			DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
--- Isnull((SELECT CASE
--								WHEN ccm.ispercentage = 1 THEN ccm.commission *
--										(CASE WHEN ccm.isonnrp = 1 THEN
--										p.NRP
--										ELSE
--										p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
--										END)
--										/ 100
--					ELSE ccm.commission
--					END
--						FROM   nrpcommissioncontractmapping ccm
--							INNER JOIN nrpcommissiontypes cot
--									ON cot.id = ccm.nrpcommissionid
--						WHERE  ccm.contractid = c.id
--					AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)
																	AS		GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            
																	AS		Brokerage,
p.NRP 							AS		NRP,
 p.LocalCurrencyConversionRate										AS		ConversionRate,
p.NRP																AS		USD_NRP,
ph.transactiontypeid                                                AS		TransactionTypeId,
ptt.code                                                            AS
TransactionTypeCode,
p.contractid                                                          AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

--inctd.SerialNumber												as SerialNumber
--citd.UnUsedTireDepth
FROM   policy p

       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = p.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = p.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = p.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = p.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = p.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
		LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN extensiontype e
              ON e.id = p.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = p.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = p.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = p.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = p.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetails vd
              ON vd.id = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetails bwd
              ON bwd.id = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
       LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetails ygd
              ON ygd.id = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
			ON va.id = ( CASE
                        WHEN ct.commoditycode = 'A' THEN vd.Variant
                        --WHEN ct.commoditycode = 'E' THEN bwd.modelid
                        WHEN ct.commoditycode = 'O' THEN oid.VariantId
                        --WHEN ct.commoditycode = 'Y' THEN ygd.modelid
						END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
		LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId

       LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId
		LEFT JOIN warrantytype wt
              ON wt.id = cep.WarrentyTypeId
       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
	   LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = p.salespersonid
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
		LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
		LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	    LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
		LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
		LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
		LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	   LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
GROUP  BY
			p.id,
			p.policyNo,
			c.id,
			p.EntryDateTime	,
			b.EntryDateTime,
			rec.uwyear,
			re.reinsurername,
			i.insurershortname,
			b.month,
			b.year,
			CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month)      ,
			c.dealname,
			dt.NAME,
			c.isactive,
			wt.warrantytypedescription,
			p.hrsusedatpolicysale,
			d.dealername,
			dl.location,
			cust.address1,
			cust.address2,
			cust.address3,
			city.cityname,
			city.zipcode,
			cust.mobileno,
			its.status,
			vd.vinno,
			vd.plateno,
			cc.commoditycategorydescription,
			m.makename,
			mo.modelname,
			va.VariantName,
			cyc.[count],
			enc.mesuretype,
			enc.enginecapacitynumber,
			vd.modelyear,
			vd.itempurchaseddate,
			mw.warrantymonths,
			mw.warrantykm,
			mo.noofdaystoriskstart,
			p.policyenddate,
			ce.attributespecification,
			p.premium,
			p.NRP,
			rec.contractno,
			cc.commoditycategorycode,
			p.policyno,
			cust.firstname,
			cust.lastname,
			rec.contractno,
			c.startdate,
			c.enddate,
			ct.commoditytypedescription,
			curr.code,
			p.policyno,
			city.cityname,
			con.countryname,
			p.policystartdate,
			p.policyenddate,
			cust.businessname,
			p.comment,
			c.liabilitylimitation,
			ct.commoditycode,
			bwd.itempurchaseddate,
			oid.itempurchaseddate,
			ygd.itempurchaseddate,
			reccon.id,
			reccon.countryname,
			reccon.currencyid,
			reccurr.currencyname,
			p.currencyperiodid,
			p.localcurrencyconversionrate,
			ph.transactiontypeid,
			ptt.code,
			vd.dealerprice,
			bwd.dealerprice,
			oid.dealerprice,
			ygd.dealerprice,
			pboNett.code,
			p.Premium,
			pboGross.code,
			SalesUser.firstname,
			SalesUser.lastname,
			dlc.cityname,
			tpab.branchcode,
			con.countrycode,
			p.uniqueref,
			prt.code,
			p.contractid,
			p.grosspremiumbeforetax,
			p.nrp,
			il.Months,
			il.Km,
			il.TopOfMW,
			vd.GrossWeight,
			p.BookletNumber,
			bk.Name,
			p.MWStartDate,
			p.TotalTax,
			vpa.Id,
			p.Co_Customer,
			custType.CustomerTypeName,
			cust.BusinessName,
			cust.BusinessTelNo,
			cust.BusinessAddress1,
			cust.BusinessAddress2,
			cust.BusinessAddress3,
			cust.BusinessAddress4,
			p.GrossPremiumBeforeTax,
			p.PolicySoldDate,
			vd.RegistrationDate,
			p.MWIsAvailable,
			p.LocalCurrencyConversionRate,
			p.MWIsAvailable,
			mw.IsUnlimited,
			ic.Code,
			ceid.InvoiceNumber,
			ic.PlateNumber,
			apmd.MakeName,
			apmodeld.ModelName,
			ceid.AdditionalDetailsModelYear,
			ceid.AdditionalDetailsMileage,
			ic.TireQuantity,
			inctd.ArticleNumber		,
			atsp.Pattern,
			c.AnnualInterestRate,
			il.Months ,
			c.LiabilityLimitation,
			p.MonthlyEMI,
			b.Number,
			i.InsurerFullName,
			vd.GrossWeight,
			c.ClaimLimitation,
			vari.VariantName,
			ats.TirePrice,
			ceid.InvoiceCode,
			ats.OriginalTireDepth

			--inctd.SerialNumber
UNION
SELECT DISTINCT
---------------------------------
b.EntryDateTime														  AS		BDXExtractDate,
rec.uwyear                                                            AS		UnderWriterYear,
re.reinsurername                                                      AS		ReinsurerName,
p.policyNo															  AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode													  AS		InvoiceCode,
ceid.InvoiceNumber													  AS      InvoiceNumber, -- New Feild
i.insurershortname                                                    AS		CedentName,
''																	  AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																	  AS		FirstName,
' '                                                                   AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
																	  AS LastName,
''																	  AS CoBuyer
,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                    AS Address
,
' '                                                               AS POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                    AS Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.mobileno + ' '
	END
														            AS MobileNumber,
	CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                    AS City,
	con.CountryName													AS Country,
-----------------------------------------------------
p.EntryDateTime AS SystemTransactionDate,
p.UniqueRef As
SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  													AS BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)											AS BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																	AS Status,
''																AS		CoverType,
wt.WarrantyTypeDescription											AS WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName													AS Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber														AS PlateNumber,
cc.CommodityCategoryDescription										AS Category,
''                                                          AS Manufacture,
''                                                         AS Model,
''                                                       as Variant,
cyc.[count]                                                           AS
CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END AS FourByFour,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                                AS
EngineCapacity,
''																AS Hybrid,
''																AS ElectricVehicle,
Convert(varchar(25),vd.GrossWeight) + ' T'                        AS
Gvw,
vd.modelyear                                                   AS ModelYear,
p.PolicySoldDate                                                      As  PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                                   
'-'	 AS VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                                   
'-'	AS VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                                   AS ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END																	  AS ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                                    AS MileageLimitationInKMs,
''																		AS ManfCoverHours,

dbo.checkAvailableByPolicyIdAndPosition('FL',p.id) as FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id) as FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id) as RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id) as RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id) as SP,
m.makename                                                          AS TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') as F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									AS NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F') as F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F') as F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F') as F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F') as F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F') as F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') as R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)						AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R') as R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R') as R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R') as R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R') as R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R') as R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																	  AS DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                                  AS DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                       AS ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'																		AS ExtentionDurationInHours,
 'N/A'																	AS HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
 AS
MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),p.MWStartDate)<= p.PolicySoldDate
	AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
 AS
CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE  CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)													AS		TotalLiability,
'1 per Tyre'																AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,
--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)            AS
MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)          AS
InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         AS
InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)         AS
DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
		AS GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            AS Brokerage,
p.NRP  AS NRP,
 p.LocalCurrencyConversionRate AS ConversionRate,
 p.NRP AS USD_NRP,
ph.transactiontypeid                                                  AS
TransactionTypeId,
'EndorsementOld'                                                      AS
TransactionTypeCode,
ph.contractid                                                         AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

FROM   policy p
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN warrantytype wt
              ON wt.id = ph.covertypeid
       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = ph.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = ph.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = ph.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = ph.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = ph.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
	    LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
       LEFT JOIN extensiontype e
              ON e.id = ph.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = ph.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = ph.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = ph.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = ph.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetailshistory vd
              ON vd.vehicledetailsid = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetailshistory bwd
              ON bwd.brownandwhitedetailsid = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
		LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN otheritemdetailshistory oidh
              ON oidh.otheritemdetailsid = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetailshistory ygd
              ON ygd.yellowgooddetailsid = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
		ON va.id = ( CASE
					WHEN ct.commoditycode = 'A' THEN vd.Variant
					--WHEN ct.commoditycode = 'E' THEN bwd.modelid
					WHEN ct.commoditycode = 'O' THEN oid.VariantId
					--WHEN ct.commoditycode = 'Y' THEN ygd.modelid
					END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
     	LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId
     LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId

       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
		 LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = ph.salespersonid
           LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
	   LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
	  LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	  LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
	  LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
	  LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
	  LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	  LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
       AND ptt.code = 'Endorsement'
GROUP  BY
		p.id,
		p.policyNo,
		c.id,
		p.EntryDateTime	,
		b.EntryDateTime,
		rec.uwyear,
		re.reinsurername,
		i.insurershortname,
		b.month,
		b.year,
		CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month) ,
		c.dealname,
		dt.NAME,
		c.isactive,
		wt.warrantytypedescription,
		ph.hrsusedatpolicysale,
		d.dealername,
		dl.location,
		cust.address1,
		cust.address2,
		cust.address3,
		city.cityname,
		city.zipcode,
		cust.mobileno,
		its.status,
		vd.vinno,
		vd.plateno,
		cc.commoditycategorydescription,
		m.makename,
		mo.modelname,
		va.VariantName,
		cyc.[count],
		enc.mesuretype,
		enc.enginecapacitynumber,
		vd.modelyear,
		vd.itempurchaseddate,
		mw.warrantymonths,
		mw.warrantykm,
		mo.noofdaystoriskstart,
		ph.policyenddate,
		ce.attributespecification,
		ph.premium,
		rec.contractno,
		cc.commoditycategorycode,
		ph.policyno,
		cust.firstname,
		cust.lastname,
		rec.contractno,
		c.startdate,
		c.enddate,
		ct.commoditytypedescription,
		curr.code,
		ph.policyno,
		city.cityname,
		con.countryname,
		ph.policystartdate,
		ph.policyenddate,
		cust.businessname,
		ph.comment,
		c.liabilitylimitation,
		ct.commoditycode,
		bwd.itempurchaseddate,
		oid.itempurchaseddate,
		ygd.itempurchaseddate,
		reccon.id,
		reccon.countryname,
		reccon.currencyid,
		reccurr.currencyname,
		ph.currencyperiodid,
		p.localcurrencyconversionrate,
		ph.transactiontypeid,
		ptt.code,
		ph.id,
		vd.dealerprice,
		bwd.dealerprice,
		oid.dealerprice,
		ygd.dealerprice,
		pboNett.code,
		p.Premium,
		pboGross.code,
		SalesUser.firstname,
		SalesUser.lastname,
		dlc.cityname,
		tpab.branchcode,
		con.countrycode,
		p.uniqueref,
		prt.code,
		ph.contractid,
		p.grosspremiumbeforetax,
		p.nrp,
		p.BookletNumber  ,
		bk.Name,
		p.MWStartDate,
		il.Months,
		il.TopOfMW,
		il.Km,
		vpa.Id,
		p.Co_Customer,
		custType.CustomerTypeName,
		cust.BusinessName,
		cust.BusinessTelNo,
		cust.BusinessAddress1,
		cust.BusinessAddress2,
		cust.BusinessAddress3,
		cust.BusinessAddress4,
		p.GrossPremiumBeforeTax,
		p.PolicySoldDate,
		vd.RegistrationDate,
		p.LocalCurrencyConversionRate,
		p.MWIsAvailable,
		p.HrsUsedAtPolicySale,
		mw.IsUnlimited,
		ic.Code,
		ceid.InvoiceNumber,
		ic.PlateNumber,
		apmd.MakeName,
		apmodeld.ModelName,
		ceid.AdditionalDetailsModelYear,
		ceid.AdditionalDetailsMileage,
		ic.TireQuantity,
		inctd.ArticleNumber	,
		atsp.Pattern,
		c.AnnualInterestRate,
		il.Months ,
		c.LiabilityLimitation,
		p.MonthlyEMI,
		b.Number,
		i.InsurerFullName,
		vd.GrossWeight,
		c.ClaimLimitation,
		p.TotalTax,
		vari.VariantName,
		ats.TirePrice,
		ceid.InvoiceCode,
		ats.OriginalTireDepth

		--inctd.SerialNumber
		) D
		Order By D.autoId

], System.Data.SqlClient.SqlException (0x80131904): Cannot find either column "dbo" or the user-defined function or aggregate "dbo.getTyreDetailsByPolicyIdAndPosition", or the name is ambiguous.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)
   at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer)
ClientConnectionId:26d3a6a1-d1d1-449e-b7e3-905b4ea0a2ac
Error Number:4121,State:1,Class:16
2021-06-09 15:08:51.9816 TAS.Services.Entities.Management.BordxEntityManager GetConfirmedBordxForExport: exception: could not execute query
[ 
SELECT Row_number()
  OVER(
    ORDER BY D.autoId) as SNo, * FROM (
SELECT DISTINCT
---------------------------------
b.EntryDateTime													AS		BDXExtractDate,
rec.uwyear                                                      AS		UnderWriterYear,
re.reinsurername                                                AS		ReinsurerName,
p.policyNo														AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode												AS		InvoiceCode,
ceid.InvoiceNumber												AS      InvoiceNumber, -- New Feild
i.insurershortname                                              AS		CedentName,
''																AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																AS		FirstName,
' '                                                             AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
                                                                AS		LastName,
''																AS		CoBuyer,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                AS		Address,
' '                                                             AS		POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                AS		Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
	CONVERT(VARCHAR, cust.mobileno + ' ')	
	END
														        AS		MobileNumber,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                AS		City,
con.CountryName													AS		Country,
p.EntryDateTime													AS		SystemTransactionDate,
p.UniqueRef														AS		SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  			AS		BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)										AS		BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS		DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																AS		Status,
''																AS		CoverType,
wt.WarrantyTypeDescription										AS		WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName												AS		Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber													AS		PlateNumber,
cc.CommodityCategoryDescription									AS		Category,
''																AS		Manufacture,
''																AS		Model,
''																AS		Variant,
cyc.[count]                                                     AS		CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END																AS		FourByFour,
''																AS		Hybrid,
''																AS		ElectricVehicle,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                          AS		EngineCapacity,
Convert(varchar(25),vd.GrossWeight) + ' T'                      AS		Gvw,
vd.modelyear                                                    AS		ModelYear,
p.PolicySoldDate                                                AS		PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                             
'-'																AS		VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                             
'-'																AS		VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                             AS		ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END															    AS		ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                             AS		MileageLimitationInKMs,
''																AS		ManfCoverHours,
dbo.checkAvailableByPolicyIdAndPosition('FL',p.id)				AS		FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id)				AS		FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id)				AS		RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id)				AS		RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id)				AS		SP,
m.makename                                                      AS		TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') AS	F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									 AS		NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F')		AS		F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F')AS		F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F')	AS		F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F')	AS		F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F')	AS		F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') AS	R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)									AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R')		AS		R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R')AS		R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R')	AS		R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R')	AS		R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R')	AS		R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																AS		DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                             AS		DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                  AS		ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'															 AS		ExtentionDurationInHours,
 'N/A'															 AS		HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
																AS		MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),
			p.MWStartDate)<= p.PolicySoldDate
			AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
																AS		CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)					AS		TotalLiability,
'1 per Tyre'													AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,


--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)       AS		MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)     AS		InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         
																AS			InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)AS			DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
--- Isnull((SELECT CASE
--								WHEN ccm.ispercentage = 1 THEN ccm.commission *
--										(CASE WHEN ccm.isonnrp = 1 THEN
--										p.NRP
--										ELSE
--										p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
--										END)
--										/ 100
--					ELSE ccm.commission
--					END
--						FROM   nrpcommissioncontractmapping ccm
--							INNER JOIN nrpcommissiontypes cot
--									ON cot.id = ccm.nrpcommissionid
--						WHERE  ccm.contractid = c.id
--					AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)
																	AS		GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            
																	AS		Brokerage,
p.NRP 							AS		NRP,
 p.LocalCurrencyConversionRate										AS		ConversionRate,
p.NRP																AS		USD_NRP,
ph.transactiontypeid                                                AS		TransactionTypeId,
ptt.code                                                            AS
TransactionTypeCode,
p.contractid                                                          AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

--inctd.SerialNumber												as SerialNumber
--citd.UnUsedTireDepth
FROM   policy p

       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = p.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = p.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = p.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = p.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = p.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
		LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN extensiontype e
              ON e.id = p.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = p.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = p.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = p.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = p.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetails vd
              ON vd.id = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetails bwd
              ON bwd.id = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
       LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetails ygd
              ON ygd.id = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
			ON va.id = ( CASE
                        WHEN ct.commoditycode = 'A' THEN vd.Variant
                        --WHEN ct.commoditycode = 'E' THEN bwd.modelid
                        WHEN ct.commoditycode = 'O' THEN oid.VariantId
                        --WHEN ct.commoditycode = 'Y' THEN ygd.modelid
						END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
		LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId

       LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId
		LEFT JOIN warrantytype wt
              ON wt.id = cep.WarrentyTypeId
       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
	   LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = p.salespersonid
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
		LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
		LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	    LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
		LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
		LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
		LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	   LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
GROUP  BY
			p.id,
			p.policyNo,
			c.id,
			p.EntryDateTime	,
			b.EntryDateTime,
			rec.uwyear,
			re.reinsurername,
			i.insurershortname,
			b.month,
			b.year,
			CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month)      ,
			c.dealname,
			dt.NAME,
			c.isactive,
			wt.warrantytypedescription,
			p.hrsusedatpolicysale,
			d.dealername,
			dl.location,
			cust.address1,
			cust.address2,
			cust.address3,
			city.cityname,
			city.zipcode,
			cust.mobileno,
			its.status,
			vd.vinno,
			vd.plateno,
			cc.commoditycategorydescription,
			m.makename,
			mo.modelname,
			va.VariantName,
			cyc.[count],
			enc.mesuretype,
			enc.enginecapacitynumber,
			vd.modelyear,
			vd.itempurchaseddate,
			mw.warrantymonths,
			mw.warrantykm,
			mo.noofdaystoriskstart,
			p.policyenddate,
			ce.attributespecification,
			p.premium,
			p.NRP,
			rec.contractno,
			cc.commoditycategorycode,
			p.policyno,
			cust.firstname,
			cust.lastname,
			rec.contractno,
			c.startdate,
			c.enddate,
			ct.commoditytypedescription,
			curr.code,
			p.policyno,
			city.cityname,
			con.countryname,
			p.policystartdate,
			p.policyenddate,
			cust.businessname,
			p.comment,
			c.liabilitylimitation,
			ct.commoditycode,
			bwd.itempurchaseddate,
			oid.itempurchaseddate,
			ygd.itempurchaseddate,
			reccon.id,
			reccon.countryname,
			reccon.currencyid,
			reccurr.currencyname,
			p.currencyperiodid,
			p.localcurrencyconversionrate,
			ph.transactiontypeid,
			ptt.code,
			vd.dealerprice,
			bwd.dealerprice,
			oid.dealerprice,
			ygd.dealerprice,
			pboNett.code,
			p.Premium,
			pboGross.code,
			SalesUser.firstname,
			SalesUser.lastname,
			dlc.cityname,
			tpab.branchcode,
			con.countrycode,
			p.uniqueref,
			prt.code,
			p.contractid,
			p.grosspremiumbeforetax,
			p.nrp,
			il.Months,
			il.Km,
			il.TopOfMW,
			vd.GrossWeight,
			p.BookletNumber,
			bk.Name,
			p.MWStartDate,
			p.TotalTax,
			vpa.Id,
			p.Co_Customer,
			custType.CustomerTypeName,
			cust.BusinessName,
			cust.BusinessTelNo,
			cust.BusinessAddress1,
			cust.BusinessAddress2,
			cust.BusinessAddress3,
			cust.BusinessAddress4,
			p.GrossPremiumBeforeTax,
			p.PolicySoldDate,
			vd.RegistrationDate,
			p.MWIsAvailable,
			p.LocalCurrencyConversionRate,
			p.MWIsAvailable,
			mw.IsUnlimited,
			ic.Code,
			ceid.InvoiceNumber,
			ic.PlateNumber,
			apmd.MakeName,
			apmodeld.ModelName,
			ceid.AdditionalDetailsModelYear,
			ceid.AdditionalDetailsMileage,
			ic.TireQuantity,
			inctd.ArticleNumber		,
			atsp.Pattern,
			c.AnnualInterestRate,
			il.Months ,
			c.LiabilityLimitation,
			p.MonthlyEMI,
			b.Number,
			i.InsurerFullName,
			vd.GrossWeight,
			c.ClaimLimitation,
			vari.VariantName,
			ats.TirePrice,
			ceid.InvoiceCode,
			ats.OriginalTireDepth

			--inctd.SerialNumber
UNION
SELECT DISTINCT
---------------------------------
b.EntryDateTime														  AS		BDXExtractDate,
rec.uwyear                                                            AS		UnderWriterYear,
re.reinsurername                                                      AS		ReinsurerName,
p.policyNo															  AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode													  AS		InvoiceCode,
ceid.InvoiceNumber													  AS      InvoiceNumber, -- New Feild
i.insurershortname                                                    AS		CedentName,
''																	  AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																	  AS		FirstName,
' '                                                                   AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
																	  AS LastName,
''																	  AS CoBuyer
,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                    AS Address
,
' '                                                               AS POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                    AS Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.mobileno + ' '
	END
														            AS MobileNumber,
	CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                    AS City,
	con.CountryName													AS Country,
-----------------------------------------------------
p.EntryDateTime AS SystemTransactionDate,
p.UniqueRef As
SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  													AS BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)											AS BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																	AS Status,
''																AS		CoverType,
wt.WarrantyTypeDescription											AS WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName													AS Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber														AS PlateNumber,
cc.CommodityCategoryDescription										AS Category,
''                                                          AS Manufacture,
''                                                         AS Model,
''                                                       as Variant,
cyc.[count]                                                           AS
CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END AS FourByFour,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                                AS
EngineCapacity,
''																AS Hybrid,
''																AS ElectricVehicle,
Convert(varchar(25),vd.GrossWeight) + ' T'                        AS
Gvw,
vd.modelyear                                                   AS ModelYear,
p.PolicySoldDate                                                      As  PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                                   
'-'	 AS VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                                   
'-'	AS VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                                   AS ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END																	  AS ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                                    AS MileageLimitationInKMs,
''																		AS ManfCoverHours,

dbo.checkAvailableByPolicyIdAndPosition('FL',p.id) as FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id) as FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id) as RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id) as RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id) as SP,
m.makename                                                          AS TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') as F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									AS NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F') as F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F') as F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F') as F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F') as F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F') as F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') as R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)						AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R') as R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R') as R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R') as R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R') as R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R') as R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																	  AS DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                                  AS DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                       AS ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'																		AS ExtentionDurationInHours,
 'N/A'																	AS HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
 AS
MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),p.MWStartDate)<= p.PolicySoldDate
	AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
 AS
CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE  CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)													AS		TotalLiability,
'1 per Tyre'																AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,
--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)            AS
MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)          AS
InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         AS
InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)         AS
DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
		AS GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            AS Brokerage,
p.NRP  AS NRP,
 p.LocalCurrencyConversionRate AS ConversionRate,
 p.NRP AS USD_NRP,
ph.transactiontypeid                                                  AS
TransactionTypeId,
'EndorsementOld'                                                      AS
TransactionTypeCode,
ph.contractid                                                         AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

FROM   policy p
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN warrantytype wt
              ON wt.id = ph.covertypeid
       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = ph.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = ph.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = ph.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = ph.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = ph.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
	    LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
       LEFT JOIN extensiontype e
              ON e.id = ph.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = ph.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = ph.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = ph.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = ph.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetailshistory vd
              ON vd.vehicledetailsid = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetailshistory bwd
              ON bwd.brownandwhitedetailsid = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
		LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN otheritemdetailshistory oidh
              ON oidh.otheritemdetailsid = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetailshistory ygd
              ON ygd.yellowgooddetailsid = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
		ON va.id = ( CASE
					WHEN ct.commoditycode = 'A' THEN vd.Variant
					--WHEN ct.commoditycode = 'E' THEN bwd.modelid
					WHEN ct.commoditycode = 'O' THEN oid.VariantId
					--WHEN ct.commoditycode = 'Y' THEN ygd.modelid
					END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
     	LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId
     LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId

       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
		 LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = ph.salespersonid
           LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
	   LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
	  LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	  LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
	  LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
	  LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
	  LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	  LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
       AND ptt.code = 'Endorsement'
GROUP  BY
		p.id,
		p.policyNo,
		c.id,
		p.EntryDateTime	,
		b.EntryDateTime,
		rec.uwyear,
		re.reinsurername,
		i.insurershortname,
		b.month,
		b.year,
		CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month) ,
		c.dealname,
		dt.NAME,
		c.isactive,
		wt.warrantytypedescription,
		ph.hrsusedatpolicysale,
		d.dealername,
		dl.location,
		cust.address1,
		cust.address2,
		cust.address3,
		city.cityname,
		city.zipcode,
		cust.mobileno,
		its.status,
		vd.vinno,
		vd.plateno,
		cc.commoditycategorydescription,
		m.makename,
		mo.modelname,
		va.VariantName,
		cyc.[count],
		enc.mesuretype,
		enc.enginecapacitynumber,
		vd.modelyear,
		vd.itempurchaseddate,
		mw.warrantymonths,
		mw.warrantykm,
		mo.noofdaystoriskstart,
		ph.policyenddate,
		ce.attributespecification,
		ph.premium,
		rec.contractno,
		cc.commoditycategorycode,
		ph.policyno,
		cust.firstname,
		cust.lastname,
		rec.contractno,
		c.startdate,
		c.enddate,
		ct.commoditytypedescription,
		curr.code,
		ph.policyno,
		city.cityname,
		con.countryname,
		ph.policystartdate,
		ph.policyenddate,
		cust.businessname,
		ph.comment,
		c.liabilitylimitation,
		ct.commoditycode,
		bwd.itempurchaseddate,
		oid.itempurchaseddate,
		ygd.itempurchaseddate,
		reccon.id,
		reccon.countryname,
		reccon.currencyid,
		reccurr.currencyname,
		ph.currencyperiodid,
		p.localcurrencyconversionrate,
		ph.transactiontypeid,
		ptt.code,
		ph.id,
		vd.dealerprice,
		bwd.dealerprice,
		oid.dealerprice,
		ygd.dealerprice,
		pboNett.code,
		p.Premium,
		pboGross.code,
		SalesUser.firstname,
		SalesUser.lastname,
		dlc.cityname,
		tpab.branchcode,
		con.countrycode,
		p.uniqueref,
		prt.code,
		ph.contractid,
		p.grosspremiumbeforetax,
		p.nrp,
		p.BookletNumber  ,
		bk.Name,
		p.MWStartDate,
		il.Months,
		il.TopOfMW,
		il.Km,
		vpa.Id,
		p.Co_Customer,
		custType.CustomerTypeName,
		cust.BusinessName,
		cust.BusinessTelNo,
		cust.BusinessAddress1,
		cust.BusinessAddress2,
		cust.BusinessAddress3,
		cust.BusinessAddress4,
		p.GrossPremiumBeforeTax,
		p.PolicySoldDate,
		vd.RegistrationDate,
		p.LocalCurrencyConversionRate,
		p.MWIsAvailable,
		p.HrsUsedAtPolicySale,
		mw.IsUnlimited,
		ic.Code,
		ceid.InvoiceNumber,
		ic.PlateNumber,
		apmd.MakeName,
		apmodeld.ModelName,
		ceid.AdditionalDetailsModelYear,
		ceid.AdditionalDetailsMileage,
		ic.TireQuantity,
		inctd.ArticleNumber	,
		atsp.Pattern,
		c.AnnualInterestRate,
		il.Months ,
		c.LiabilityLimitation,
		p.MonthlyEMI,
		b.Number,
		i.InsurerFullName,
		vd.GrossWeight,
		c.ClaimLimitation,
		p.TotalTax,
		vari.VariantName,
		ats.TirePrice,
		ceid.InvoiceCode,
		ats.OriginalTireDepth

		--inctd.SerialNumber
		) D
		Order By D.autoId

 ]
[SQL: 
SELECT Row_number()
  OVER(
    ORDER BY D.autoId) as SNo, * FROM (
SELECT DISTINCT
---------------------------------
b.EntryDateTime													AS		BDXExtractDate,
rec.uwyear                                                      AS		UnderWriterYear,
re.reinsurername                                                AS		ReinsurerName,
p.policyNo														AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode												AS		InvoiceCode,
ceid.InvoiceNumber												AS      InvoiceNumber, -- New Feild
i.insurershortname                                              AS		CedentName,
''																AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																AS		FirstName,
' '                                                             AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
                                                                AS		LastName,
''																AS		CoBuyer,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                AS		Address,
' '                                                             AS		POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                AS		Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
	CONVERT(VARCHAR, cust.mobileno + ' ')	
	END
														        AS		MobileNumber,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                AS		City,
con.CountryName													AS		Country,
p.EntryDateTime													AS		SystemTransactionDate,
p.UniqueRef														AS		SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  			AS		BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)										AS		BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS		DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																AS		Status,
''																AS		CoverType,
wt.WarrantyTypeDescription										AS		WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName												AS		Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber													AS		PlateNumber,
cc.CommodityCategoryDescription									AS		Category,
''																AS		Manufacture,
''																AS		Model,
''																AS		Variant,
cyc.[count]                                                     AS		CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END																AS		FourByFour,
''																AS		Hybrid,
''																AS		ElectricVehicle,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                          AS		EngineCapacity,
Convert(varchar(25),vd.GrossWeight) + ' T'                      AS		Gvw,
vd.modelyear                                                    AS		ModelYear,
p.PolicySoldDate                                                AS		PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                             
'-'																AS		VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                             
'-'																AS		VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                             AS		ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END															    AS		ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                             AS		MileageLimitationInKMs,
''																AS		ManfCoverHours,
dbo.checkAvailableByPolicyIdAndPosition('FL',p.id)				AS		FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id)				AS		FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id)				AS		RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id)				AS		RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id)				AS		SP,
m.makename                                                      AS		TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') AS	F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									 AS		NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F')		AS		F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F')AS		F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F')	AS		F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F')	AS		F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F')	AS		F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') AS	R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)									AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R')		AS		R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R')AS		R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R')	AS		R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R')	AS		R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R')	AS		R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																AS		DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                             AS		DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                  AS		ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'															 AS		ExtentionDurationInHours,
 'N/A'															 AS		HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
																AS		MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),
			p.MWStartDate)<= p.PolicySoldDate
			AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
																AS		CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)					AS		TotalLiability,
'1 per Tyre'													AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,


--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)       AS		MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)     AS		InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         
																AS			InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)AS			DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
--- Isnull((SELECT CASE
--								WHEN ccm.ispercentage = 1 THEN ccm.commission *
--										(CASE WHEN ccm.isonnrp = 1 THEN
--										p.NRP
--										ELSE
--										p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
--										END)
--										/ 100
--					ELSE ccm.commission
--					END
--						FROM   nrpcommissioncontractmapping ccm
--							INNER JOIN nrpcommissiontypes cot
--									ON cot.id = ccm.nrpcommissionid
--						WHERE  ccm.contractid = c.id
--					AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)
																	AS		GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            
																	AS		Brokerage,
p.NRP 							AS		NRP,
 p.LocalCurrencyConversionRate										AS		ConversionRate,
p.NRP																AS		USD_NRP,
ph.transactiontypeid                                                AS		TransactionTypeId,
ptt.code                                                            AS
TransactionTypeCode,
p.contractid                                                          AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

--inctd.SerialNumber												as SerialNumber
--citd.UnUsedTireDepth
FROM   policy p

       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = p.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = p.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = p.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = p.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = p.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
		LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN extensiontype e
              ON e.id = p.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = p.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = p.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = p.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = p.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetails vd
              ON vd.id = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetails bwd
              ON bwd.id = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
       LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetails ygd
              ON ygd.id = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
			ON va.id = ( CASE
                        WHEN ct.commoditycode = 'A' THEN vd.Variant
                        --WHEN ct.commoditycode = 'E' THEN bwd.modelid
                        WHEN ct.commoditycode = 'O' THEN oid.VariantId
                        --WHEN ct.commoditycode = 'Y' THEN ygd.modelid
						END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
		LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId

       LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId
		LEFT JOIN warrantytype wt
              ON wt.id = cep.WarrentyTypeId
       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
	   LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = p.salespersonid
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
		LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
		LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	    LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
		LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
		LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
		LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	   LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
GROUP  BY
			p.id,
			p.policyNo,
			c.id,
			p.EntryDateTime	,
			b.EntryDateTime,
			rec.uwyear,
			re.reinsurername,
			i.insurershortname,
			b.month,
			b.year,
			CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month)      ,
			c.dealname,
			dt.NAME,
			c.isactive,
			wt.warrantytypedescription,
			p.hrsusedatpolicysale,
			d.dealername,
			dl.location,
			cust.address1,
			cust.address2,
			cust.address3,
			city.cityname,
			city.zipcode,
			cust.mobileno,
			its.status,
			vd.vinno,
			vd.plateno,
			cc.commoditycategorydescription,
			m.makename,
			mo.modelname,
			va.VariantName,
			cyc.[count],
			enc.mesuretype,
			enc.enginecapacitynumber,
			vd.modelyear,
			vd.itempurchaseddate,
			mw.warrantymonths,
			mw.warrantykm,
			mo.noofdaystoriskstart,
			p.policyenddate,
			ce.attributespecification,
			p.premium,
			p.NRP,
			rec.contractno,
			cc.commoditycategorycode,
			p.policyno,
			cust.firstname,
			cust.lastname,
			rec.contractno,
			c.startdate,
			c.enddate,
			ct.commoditytypedescription,
			curr.code,
			p.policyno,
			city.cityname,
			con.countryname,
			p.policystartdate,
			p.policyenddate,
			cust.businessname,
			p.comment,
			c.liabilitylimitation,
			ct.commoditycode,
			bwd.itempurchaseddate,
			oid.itempurchaseddate,
			ygd.itempurchaseddate,
			reccon.id,
			reccon.countryname,
			reccon.currencyid,
			reccurr.currencyname,
			p.currencyperiodid,
			p.localcurrencyconversionrate,
			ph.transactiontypeid,
			ptt.code,
			vd.dealerprice,
			bwd.dealerprice,
			oid.dealerprice,
			ygd.dealerprice,
			pboNett.code,
			p.Premium,
			pboGross.code,
			SalesUser.firstname,
			SalesUser.lastname,
			dlc.cityname,
			tpab.branchcode,
			con.countrycode,
			p.uniqueref,
			prt.code,
			p.contractid,
			p.grosspremiumbeforetax,
			p.nrp,
			il.Months,
			il.Km,
			il.TopOfMW,
			vd.GrossWeight,
			p.BookletNumber,
			bk.Name,
			p.MWStartDate,
			p.TotalTax,
			vpa.Id,
			p.Co_Customer,
			custType.CustomerTypeName,
			cust.BusinessName,
			cust.BusinessTelNo,
			cust.BusinessAddress1,
			cust.BusinessAddress2,
			cust.BusinessAddress3,
			cust.BusinessAddress4,
			p.GrossPremiumBeforeTax,
			p.PolicySoldDate,
			vd.RegistrationDate,
			p.MWIsAvailable,
			p.LocalCurrencyConversionRate,
			p.MWIsAvailable,
			mw.IsUnlimited,
			ic.Code,
			ceid.InvoiceNumber,
			ic.PlateNumber,
			apmd.MakeName,
			apmodeld.ModelName,
			ceid.AdditionalDetailsModelYear,
			ceid.AdditionalDetailsMileage,
			ic.TireQuantity,
			inctd.ArticleNumber		,
			atsp.Pattern,
			c.AnnualInterestRate,
			il.Months ,
			c.LiabilityLimitation,
			p.MonthlyEMI,
			b.Number,
			i.InsurerFullName,
			vd.GrossWeight,
			c.ClaimLimitation,
			vari.VariantName,
			ats.TirePrice,
			ceid.InvoiceCode,
			ats.OriginalTireDepth

			--inctd.SerialNumber
UNION
SELECT DISTINCT
---------------------------------
b.EntryDateTime														  AS		BDXExtractDate,
rec.uwyear                                                            AS		UnderWriterYear,
re.reinsurername                                                      AS		ReinsurerName,
p.policyNo															  AS		SystemGeneratedNumber,		-- New Feild
ceid.InvoiceCode													  AS		InvoiceCode,
ceid.InvoiceNumber													  AS      InvoiceNumber, -- New Feild
i.insurershortname                                                    AS		CedentName,
''																	  AS		Bank,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.firstname
	END
																	  AS		FirstName,
' '                                                                   AS		MiddleName,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.lastname
	END
																	  AS LastName,
''																	  AS CoBuyer
,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.address1 + ',' + cust.address2 + ',' + cust.address3
	END
                                                                    AS Address
,
' '                                                               AS POBox,
CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.zipcode
	END
                                                                    AS Zip,
 CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		cust.mobileno + ' '
	END
														            AS MobileNumber,
	CASE WHEN custType.CustomerTypeName='Corporate'
	THEN
		''
	ELSE
		city.cityname
	END
                                                                    AS City,
	con.CountryName													AS Country,
-----------------------------------------------------
p.EntryDateTime AS SystemTransactionDate,
p.UniqueRef As
SystemPolicyTransactionID,
-----------------------------
CONVERT(VARCHAR,b.year) + RIGHT('00'+convert(varchar(2),b.Month),2) AS		BordxNumber, 
--CONVERT(VARCHAR,b.year) + CONVERT(VARCHAR,b.Month)  													AS BordxNumber,-- New
CONVERT(VARCHAR,DATENAME(month, DATEADD(month, b.Month-1, CAST('2008-01-01' AS datetime)))) AS		BordxMonth,-- New
--CONVERT(VARCHAR,b.Month)											AS BordxMonth,-- New
CONVERT(VARCHAR,b.year)											AS		BordxYear,--New
''																AS		Salesman,
''																AS		SalesmanCommision,
ct.CommodityTypeDescription										AS		Commodity,
dt.Name															AS DealType, -- New
its.status                                                      AS		NewUsed,
d.dealername                                                    AS		DealerName,
dlc.cityname                                                    AS		DealerLocation,
CASE WHEN c.IsActive = '1'
THEN 
	'Active'
ELSE
	'Inactive'
END																	AS Status,
''																AS		CoverType,
wt.WarrantyTypeDescription											AS WarrantyType,
ceid.AdditionalDetailsMileage									AS		KMSAtPolicySale,
i.InsurerFullName													AS Insured,
''																AS		VehicleIdentification,
''																AS		EngineNumber,
ic.PlateNumber														AS PlateNumber,
cc.CommodityCategoryDescription										AS Category,
''                                                          AS Manufacture,
''                                                         AS Model,
''                                                       as Variant,
cyc.[count]                                                           AS
CylinderCount,
CASE WHEN (vpa.Id IS NULL) THEN
    'No'
ELSE
	'Yes'
END AS FourByFour,
CONVERT(VARCHAR(50), enc.enginecapacitynumber)
+ ' ' + enc.mesuretype                                                AS
EngineCapacity,
''																AS Hybrid,
''																AS ElectricVehicle,
Convert(varchar(25),vd.GrossWeight) + ' T'                        AS
Gvw,
vd.modelyear                                                   AS ModelYear,
p.PolicySoldDate                                                      As  PolicySoldDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.itempurchaseddate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate
--END                                                                   
'-'	 AS VehiclePurcheseDate,
--CASE
--  WHEN ct.commoditycode = 'A' THEN vd.RegistrationDate
--  WHEN ct.commoditycode = 'E' THEN bwd.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'O' THEN oid.itempurchaseddate --no data capturing
--  WHEN ct.commoditycode = 'Y' THEN ygd.itempurchaseddate  --no datacapturing
--END                                                                   
'-'	AS VehicleRegistrationDate,
CASE WHEN p.MWIsAvailable=1 THEN
	p.MWStartDate
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		p.MWStartDate
	END
END                                                                   AS ManfWarrantyStartDate,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,
    DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
ELSE
	CASE WHEN (mw.warrantymonths IS NULL OR mw.warrantymonths=0) THEN
		CAST(-53690 AS DATETIME)
	ELSE
		DATEADD(DAY, -1,
		DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate))
	END
END																	  AS ManfWarrantyTerminationDate,
''																 AS		CancellationDate,
ISNULL(CONVERT(VARCHAR(10), mw.warrantymonths), '-')             AS		ManufLimitationInHours,
CASE WHEN mw.IsUnlimited=1
THEN
	'Unlimited'
ELSE
ISNULL(CONVERT(VARCHAR(10), mw.warrantykm), '-')
END                                                                    AS MileageLimitationInKMs,
''																		AS ManfCoverHours,

dbo.checkAvailableByPolicyIdAndPosition('FL',p.id) as FL,
dbo.checkAvailableByPolicyIdAndPosition('FR',p.id) as FR,
dbo.checkAvailableByPolicyIdAndPosition('BL',p.id) as RL,
dbo.checkAvailableByPolicyIdAndPosition('BR',p.id) as RR,
dbo.checkAvailableByPolicyIdAndPosition('S',p.id) as SP,
m.makename                                                          AS TyreBrand,
ats.OriginalTireDepth												AS TreadDepth,
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'F') as F_ArticleNumber,
dbo.getNumberofTyresFront(p.Id)									AS NumberofTyresFront,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'F') as F_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'F') as F_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'F') as F_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'F') as F_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'F') as F_DotNumber,
 
dbo.getTyreDetailsByPolicyIdAndPosition('ArticleNumber',p.id,'R') as R_ArticleNumber,
dbo.getNumberofTyresRear(p.Id)						AS		NumberofTyresRear,
dbo.getTyreDetailsByPolicyIdAndPosition('Width',p.id,'R') as R_Width,
dbo.getTyreDetailsByPolicyIdAndPosition('CrossSection',p.id,'R') as R_CrossSection,
dbo.getTyreDetailsByPolicyIdAndPosition('Diameter',p.id,'R') as R_Diameter,
dbo.getTyreDetailsByPolicyIdAndPosition('LoadSpeed',p.id,'R') as R_LoadSpeed,
dbo.getTyreDetailsByPolicyIdAndPosition('DotNumber',p.id,'R') as R_DotNumber,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)
ELSE
	p.PolicySoldDate
END																	  AS DateOfInsuranceRiskStart,
CASE WHEN p.MWIsAvailable=1 THEN
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),
	DATEADD(MONTH, ISNULL(mw.warrantymonths, 0), p.MWStartDate)))
	ELSE
	DATEADD(DAY, -1,DATEADD(MONTH,ISNULL(il.Months, 0),p.PolicySoldDate))
END	                                                                  AS DateOfInsuranceRiskTermination,
 CONVERT(varchar(10),il.Months)                                       AS ExtensionPeriodInMonths,
   il.Months															  AS ExtensionDurationInMonths,
 'N/A'																		AS ExtentionDurationInHours,
 'N/A'																	AS HrsCutOff,
 CASE WHEN il.Km=0 THEN
			'Unlimited'
		ELSE
			CONVERT(varchar(50), il.Km)
		END
 AS
MileageExtensionInKMS,
CASE WHEN (p.MWIsAvailable=1 AND DATEADD(MONTH,Isnull(mw.warrantymonths, 0),p.MWStartDate)<= p.PolicySoldDate
	AND Isnull(mw.WarrantyKm, 0)<= p.HrsUsedAtPolicySale AND its.status = 'New')
	THEN--mw available and applicable
		CASE WHEN il.TopOfMW=1
		THEN
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
			END

		ELSE
			CASE WHEN il.Km=0 THEN
				'Unlimited'
			ELSE
				CONVERT(varchar(50),il.Km )
			END

		END
	ELSE -- no mw applicable
		CASE WHEN  its.status = 'New'
		THEN
			CASE WHEN il.TopOfMW=1
			THEN
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
					CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
				END
			ELSE
				CASE WHEN il.Km=0 THEN
					'Unlimited'
				ELSE
				CONVERT(varchar(50),Isnull(mw.WarrantyKm, 0) + il.Km)
					--CONVERT(varchar(50),il.Km )
				END
			END
		ELSE -- no mw and used vehicle , so cutoff starts from usage
			CONVERT(varchar(50),Isnull(p.HrsUsedAtPolicySale, 0) + il.Km)
		END
	END
 AS
CutOffKm,
dbo.getSumInsured(p.id,ct.commoditycode)						AS		SumInsured,
CASE WHEN (ats.TirePrice * LocalCurrencyConversionRate) <= 2500 
	 THEN (ats.TirePrice * LocalCurrencyConversionRate)
	 ELSE  CAST(2500 AS DECIMAL(18,8) ) 
	 END AS TotalLiability,
--(ats.TirePrice * LocalCurrencyConversionRate)													AS		TotalLiability,
'1 per Tyre'																AS		MaximumNoofClaims,
p.GrossPremiumBeforeTax                                         AS		GrossPremiumExcTax,
(p.TotalTax / LocalCurrencyConversionRate)					    AS		VAT,
''																AS		SalesTax,
p.premium														AS		GrossPremiumIncTax,
--marketing fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Marketing%' )), 0.00)            AS
MarketingFee,
--end marketing fee
--Insurer fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Insurer Fee%' )), 0.00)          AS
InsurerFee,
---end insarance fee
Isnull((SELECT CASE
                WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( '%Admin%' )), 0.00)                AS		LicensingFee,
--start Internal GoodWill
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Internal GoodWill%' )), 0.00)         AS
InternalGoodWill,
--end Internal GoodWill
''																AS			ManufactureCommission,
''																AS			ProducerCommision,
''																AS			SalesCommision,
''																AS			DocumentFee,
--start Dealer Commission
Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Dealer Commission%' )), 0.00)         AS
DealerCommission,
--end Dealer Commission
--start gross premium less sales commission
p.premium 
		AS GrossPremiumLessCommission,
--end GrossPremiumLessCommission
p.NRP - ((p.NRP*5)/100)												AS		NRPRIRetention,
(p.NRP*5)/100														AS		NRPInsurerRetention,
p.NRP																AS		NetAbsoluteRiskPremium,
 Isnull((SELECT CASE
                 WHEN ccm.ispercentage = 1 THEN ccm.commission *
				 (CASE WHEN ccm.isonnrp = 1 THEN
					p.NRP
				 ELSE
					p.Premium-(p.TotalTax/LocalCurrencyConversionRate)
				 END)
				 / 100
       ELSE ccm.commission
       END
        FROM   nrpcommissioncontractmapping ccm
               INNER JOIN nrpcommissiontypes cot
                       ON cot.id = ccm.nrpcommissionid
        WHERE  ccm.contractid = c.id
               AND cot.NAME LIKE ( 'Reinsurer Brokerage%' )), 0.00)            AS Brokerage,
p.NRP  AS NRP,
 p.LocalCurrencyConversionRate AS ConversionRate,
 p.NRP AS USD_NRP,
ph.transactiontypeid                                                  AS
TransactionTypeId,
'EndorsementOld'                                                      AS
TransactionTypeCode,
ph.contractid                                                         AS
ContractId,
p.grosspremiumbeforetax                                               AS
GrossPremiumBeforeTax,
--p.nrp                                                                 AS NRP,
p.id                                                                  AS
PolicyId,
p.EntryDateTime														  AS
SystemPolicyTransactionDate,
p.uniqueref                                                           as autoId,
reccon.id                                                             AS BaseCountryId,
reccon.countryname                                                    AS BaseCountry,
p.localcurrencyconversionrate                                         AS CurrencyConversionRate

FROM   policy p
       LEFT JOIN policyhistory ph
              ON ph.policyid = p.id
       LEFT JOIN warrantytype wt
              ON wt.id = ph.covertypeid
       LEFT JOIN bordxdetails bd
              ON bd.policyid = p.id
       LEFT JOIN bordx b
              ON b.id = bd.bordxid
       LEFT JOIN commoditytype ct
              ON ct.commoditytypeid = ph.commoditytypeid
       LEFT JOIN product pr
              ON pr.id = ph.productid
       LEFT JOIN producttype prt
              ON prt.id = pr.producttypeid
       LEFT JOIN dealer d
              ON d.id = ph.dealerid
       LEFT JOIN dealerlocation dl
              ON dl.id = ph.dealerlocationid
       LEFT JOIN city dlc
              ON dlc.id = dl.cityid
       LEFT JOIN contract c
              ON c.id = ph.contractid

       LEFT JOIN dealtype dt
              ON dt.id = c.dealtype
       LEFT JOIN insurer i
              ON i.id = c.insurerid
       LEFT JOIN reinsurercontract rec
              ON rec.id = c.ReinsurerContractId
	    LEFT JOIN Broker bk
              ON bk.id = rec.brokerid
       LEFT JOIN reinsurer re
              ON re.id = rec.reinsurerid
       LEFT JOIN extensiontype e
              ON e.id = ph.extensiontypeid
       LEFT JOIN currency curr
              ON curr.id = ph.premiumcurrencytypeid
       LEFT JOIN currency currDealer
              ON currDealer.id = ph.dealerpaymentcurrencytypeid
       LEFT JOIN currency currCustomer
              ON currCustomer.id = ph.customerpaymentcurrencytypeid
       LEFT JOIN customer cust
              ON cust.id = ph.customerid
	   LEFT JOIN CustomerType custType
			ON cust.CustomerTypeId = custType.Id
       LEFT JOIN country con
              ON con.id = c.countryid
       LEFT JOIN country reccon
              ON reccon.id = rec.countryid
       LEFT JOIN currency reccurr
              ON reccurr.id = reccon.currencyid
       LEFT JOIN city city
              ON city.id = cust.cityid
       LEFT JOIN vehiclepolicy vp
              ON vp.policyid = p.id
       LEFT JOIN vehicledetailshistory vd
              ON vd.vehicledetailsid = vp.vehicleid
       LEFT JOIN bandwpolicy bwp
              ON bwp.policyid = p.id
       LEFT JOIN brownandwhitedetailshistory bwd
              ON bwd.brownandwhitedetailsid = bwp.bandwid
       LEFT JOIN otheritempolicy oip
              ON oip.policyid = p.id
		LEFT JOIN otheritemdetails oid
              ON oid.id = oip.otheritemid
       LEFT JOIN otheritemdetailshistory oidh
              ON oidh.otheritemdetailsid = oip.otheritemid
       LEFT JOIN yellowgoodpolicy ygp
              ON ygp.policyid = p.id
       LEFT JOIN yellowgooddetailshistory ygd
              ON ygd.yellowgooddetailsid = ygp.yellowgoodid
       LEFT JOIN itemstatus its
              ON its.id = ( CASE
                              WHEN ct.commoditycode = 'A' THEN vd.itemstatusid
                              WHEN ct.commoditycode = 'E' THEN bwd.itemstatusid
                              WHEN ct.commoditycode = 'O' THEN oid.itemstatusid
                              WHEN ct.commoditycode = 'Y' THEN ygd.itemstatusid
                            END )
       LEFT JOIN commoditycategory cc
              ON cc.commoditycategoryid = ( CASE
                                              WHEN ct.commoditycode = 'A' THEN
                                              vd.categoryid
                                              WHEN ct.commoditycode = 'E' THEN
                                              bwd.categoryid
                                              WHEN ct.commoditycode = 'O' THEN
                                              oid.categoryid
                                              WHEN ct.commoditycode = 'Y' THEN
                                              ygd.categoryid
                                            END )
       LEFT JOIN make m
              ON m.id = ( CASE
                            WHEN ct.commoditycode = 'A' THEN vd.makeid
                            WHEN ct.commoditycode = 'E' THEN bwd.makeid
                            WHEN ct.commoditycode = 'O' THEN oid.makeid
                            WHEN ct.commoditycode = 'Y' THEN ygd.makeid
                          END )
       LEFT JOIN model mo
              ON mo.id = ( CASE
                             WHEN ct.commoditycode = 'A' THEN vd.modelid
                             WHEN ct.commoditycode = 'E' THEN bwd.modelid
                             WHEN ct.commoditycode = 'O' THEN oid.modelid
                             WHEN ct.commoditycode = 'Y' THEN ygd.modelid
                           END )
		LEFT JOIN variant va
		ON va.id = ( CASE
					WHEN ct.commoditycode = 'A' THEN vd.Variant
					--WHEN ct.commoditycode = 'E' THEN bwd.modelid
					WHEN ct.commoditycode = 'O' THEN oid.VariantId
					--WHEN ct.commoditycode = 'Y' THEN ygd.modelid
					END )
       LEFT JOIN cylindercount cyc
              ON cyc.id = vd.cylindercountid
       LEFT JOIN enginecapacity enc
              ON enc.id = vd.enginecapacityid
     	LEFT JOIN ManufacturerWarrantyDetails mwd
              ON mwd.modelid = mo.id
                 AND mwd.countryid = rec.countryid
       LEFT JOIN manufacturerwarranty mw
              ON mw.makeid = m.id
                  AND mw.id = mwd.ManufacturerWarrantyId
     LEFT JOIN contractextensions ce
              ON ce.id = p.ContractInsuaranceLimitationId
		LEFT JOIN ContractExtensionPremium cep
              ON cep.id = p.ContractExtensionPremiumId
		LEFT JOIN ContractInsuaranceLimitation cil
              ON cil.id = p.ContractExtensionsId
		LEFT JOIN InsuaranceLimitation il
              ON il.id = cil.InsuaranceLimitationId

       LEFT JOIN contractextensionvariant cev
              ON cev.contractextensionid = ce.id  and cev.VariantId = vd.Variant
       LEFT JOIN variant vari
              ON vari.id = cev.variantid
		LEFT JOIN TireSizeVariantMap tvm 
			  ON vari.Id = tvm.VariantId
		 LEFT JOIN VariantPremiumAddon vpa
              ON  vpa.VariantId = vari.id  and vpa.PremiumAddonTypeId in  (
			  SELECT Id from PremiumAddonType WHERE CommodityTypeId = ct.commoditytypeid AND
			  AddonTypeCode = 'F'
			  )
       LEFT JOIN premiumbasedon pboNett
              ON pboNett.id = cep.PremiumBasedOnNett
       LEFT JOIN premiumbasedon pboGross
              ON pboGross.id = cep.PremiumBasedOnGross
       LEFT JOIN nrpcommissioncontractmapping nrpccm
              ON nrpccm.contractid = c.id
                 AND nrpccm.nrpcommissionid IN ((SELECT id
                                                 FROM   nrpcommissiontypes
                                                 WHERE
                     NAME IN ( 'Admin Fee',
                               'Sales Commission'
                             )))
       LEFT JOIN internaluser SalesUser
              ON SalesUser.id = ph.salespersonid
           LEFT JOIN policytransactiontype ptt
              ON ptt.id = ph.transactiontypeid
       LEFT JOIN tpabranch tpab
              ON tpab.id = p.tpabranchid
	   LEFT JOIN InvoiceCodeDetails icd
				ON icd.PolicyId = p.id
	  LEFT JOIN InvoiceCode ic
				ON ic.id = icd.InvoiceCodeId
	  LEFT JOIN InvoiceCodeTireDetails inctd
				ON inctd.InvoiceCodeDetailId = icd.id
	  LEFT JOIN AvailableTireSizesPattern atsp
				ON atsp.Id = inctd.AvailableTireSizesPatternId
	  LEFT JOIN AvailableTireSizes ats 
				ON ats.Id = atsp.AvailableTireSizesId
	  LEFT JOIN ClaimItemTireDetails citd
				ON citd.InvoiceCodeTireId = inctd.id
	  LEFT JOIN CustomerEnterdInvoiceDetails ceid
			ON ceid.InvoiceCodeId =ic.Id
	   LEFT JOIN AdditionalPolicyMakeData apmd
			ON apmd.Id = ceid.AdditionalDetailsMakeId
	   LEFT JOIN AdditionalPolicyModelData apmodeld
			ON apmodeld.Id = ceid.AdditionalDetailsModelId

WHERE  b.id =  '86a72434-6d91-4080-9c6d-84f7777906aa'
--WHERE  b.id =  '{F0ED3739-C6EC-476F-9C90-CB3AE4240E32}'
       AND ptt.code = 'Endorsement'
GROUP  BY
		p.id,
		p.policyNo,
		c.id,
		p.EntryDateTime	,
		b.EntryDateTime,
		rec.uwyear,
		re.reinsurername,
		i.insurershortname,
		b.month,
		b.year,
		CONVERT(VARCHAR,b.year) + REPLICATE('0',2-LEN(b.month)) + CONVERT(VARCHAR,b.month) ,
		c.dealname,
		dt.NAME,
		c.isactive,
		wt.warrantytypedescription,
		ph.hrsusedatpolicysale,
		d.dealername,
		dl.location,
		cust.address1,
		cust.address2,
		cust.address3,
		city.cityname,
		city.zipcode,
		cust.mobileno,
		its.status,
		vd.vinno,
		vd.plateno,
		cc.commoditycategorydescription,
		m.makename,
		mo.modelname,
		va.VariantName,
		cyc.[count],
		enc.mesuretype,
		enc.enginecapacitynumber,
		vd.modelyear,
		vd.itempurchaseddate,
		mw.warrantymonths,
		mw.warrantykm,
		mo.noofdaystoriskstart,
		ph.policyenddate,
		ce.attributespecification,
		ph.premium,
		rec.contractno,
		cc.commoditycategorycode,
		ph.policyno,
		cust.firstname,
		cust.lastname,
		rec.contractno,
		c.startdate,
		c.enddate,
		ct.commoditytypedescription,
		curr.code,
		ph.policyno,
		city.cityname,
		con.countryname,
		ph.policystartdate,
		ph.policyenddate,
		cust.businessname,
		ph.comment,
		c.liabilitylimitation,
		ct.commoditycode,
		bwd.itempurchaseddate,
		oid.itempurchaseddate,
		ygd.itempurchaseddate,
		reccon.id,
		reccon.countryname,
		reccon.currencyid,
		reccurr.currencyname,
		ph.currencyperiodid,
		p.localcurrencyconversionrate,
		ph.transactiontypeid,
		ptt.code,
		ph.id,
		vd.dealerprice,
		bwd.dealerprice,
		oid.dealerprice,
		ygd.dealerprice,
		pboNett.code,
		p.Premium,
		pboGross.code,
		SalesUser.firstname,
		SalesUser.lastname,
		dlc.cityname,
		tpab.branchcode,
		con.countrycode,
		p.uniqueref,
		prt.code,
		ph.contractid,
		p.grosspremiumbeforetax,
		p.nrp,
		p.BookletNumber  ,
		bk.Name,
		p.MWStartDate,
		il.Months,
		il.TopOfMW,
		il.Km,
		vpa.Id,
		p.Co_Customer,
		custType.CustomerTypeName,
		cust.BusinessName,
		cust.BusinessTelNo,
		cust.BusinessAddress1,
		cust.BusinessAddress2,
		cust.BusinessAddress3,
		cust.BusinessAddress4,
		p.GrossPremiumBeforeTax,
		p.PolicySoldDate,
		vd.RegistrationDate,
		p.LocalCurrencyConversionRate,
		p.MWIsAvailable,
		p.HrsUsedAtPolicySale,
		mw.IsUnlimited,
		ic.Code,
		ceid.InvoiceNumber,
		ic.PlateNumber,
		apmd.MakeName,
		apmodeld.ModelName,
		ceid.AdditionalDetailsModelYear,
		ceid.AdditionalDetailsMileage,
		ic.TireQuantity,
		inctd.ArticleNumber	,
		atsp.Pattern,
		c.AnnualInterestRate,
		il.Months ,
		c.LiabilityLimitation,
		p.MonthlyEMI,
		b.Number,
		i.InsurerFullName,
		vd.GrossWeight,
		c.ClaimLimitation,
		p.TotalTax,
		vari.VariantName,
		ats.TirePrice,
		ceid.InvoiceCode,
		ats.OriginalTireDepth

		--inctd.SerialNumber
		) D
		Order By D.autoId

], System.Data.SqlClient.SqlException (0x80131904): Cannot find either column "dbo" or the user-defined function or aggregate "dbo.getNumberofTyresFront", or the name is ambiguous.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)
   at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer)
ClientConnectionId:5ffcf3ea-ba12-417c-bcf7-2a0a81a76b33
Error Number:4121,State:1,Class:16
2021-06-09 15:10:36.1002 TAS.Services.Entities.Management.BordxEntityManager GetConfirmedBordxForExport: exception: could not execute query
[ select bordxrepor0_.Id as Id1_141_, bordxrepor0_.HeaderName as Head2_141_, bordxrepor0_.Sequance as Sequ3_141_, bordxrepor0_.GenarateSum as Gena4_141_ from BordxReportColumnHeaders bordxrepor0_ order by bordxrepor0_.Sequance asc ]
[SQL: select bordxrepor0_.Id as Id1_141_, bordxrepor0_.HeaderName as Head2_141_, bordxrepor0_.Sequance as Sequ3_141_, bordxrepor0_.GenarateSum as Gena4_141_ from BordxReportColumnHeaders bordxrepor0_ order by bordxrepor0_.Sequance asc], System.Data.SqlClient.SqlException (0x80131904): Invalid column name 'GenarateSum'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)
   at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer)
ClientConnectionId:95f8a866-b772-401a-a6c5-09a08576a9b9
Error Number:207,State:1,Class:16
2021-06-09 15:10:56.3541 TAS.Services.Entities.Management.BordxEntityManager GetConfirmedBordxForExport: exception: could not execute query
[ select bordxrepor0_.Id as Id1_141_, bordxrepor0_.HeaderName as Head2_141_, bordxrepor0_.Sequance as Sequ3_141_, bordxrepor0_.GenarateSum as Gena4_141_ from BordxReportColumnHeaders bordxrepor0_ order by bordxrepor0_.Sequance asc ]
[SQL: select bordxrepor0_.Id as Id1_141_, bordxrepor0_.HeaderName as Head2_141_, bordxrepor0_.Sequance as Sequ3_141_, bordxrepor0_.GenarateSum as Gena4_141_ from BordxReportColumnHeaders bordxrepor0_ order by bordxrepor0_.Sequance asc], System.Data.SqlClient.SqlException (0x80131904): Invalid column name 'GenarateSum'.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData()
   at System.Data.SqlClient.SqlDataReader.get_MetaData()
   at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)
   at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method)
   at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior)
   at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()
   at NHibernate.AdoNet.AbstractBatcher.ExecuteReader(IDbCommand cmd)
   at NHibernate.Loader.Loader.GetResultSet(IDbCommand st, Boolean autoDiscoverTypes, Boolean callable, RowSelection selection, ISessionImplementor session)
   at NHibernate.Loader.Loader.DoQuery(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoQueryAndInitializeNonLazyCollections(ISessionImplementor session, QueryParameters queryParameters, Boolean returnProxies, IResultTransformer forcedResultTransformer)
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer)
ClientConnectionId:303c2f34-1fe7-47e7-ba30-5d4cd2daea94
Error Number:207,State:1,Class:16
